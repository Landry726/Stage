
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Membre
 * 
 */
export type Membre = $Result.DefaultSelection<Prisma.$MembrePayload>
/**
 * Model Mission
 * 
 */
export type Mission = $Result.DefaultSelection<Prisma.$MissionPayload>
/**
 * Model PaiementMission
 * 
 */
export type PaiementMission = $Result.DefaultSelection<Prisma.$PaiementMissionPayload>
/**
 * Model Cotisation
 * 
 */
export type Cotisation = $Result.DefaultSelection<Prisma.$CotisationPayload>
/**
 * Model CaisseSociale
 * 
 */
export type CaisseSociale = $Result.DefaultSelection<Prisma.$CaisseSocialePayload>
/**
 * Model SoldeEntree
 * 
 */
export type SoldeEntree = $Result.DefaultSelection<Prisma.$SoldeEntreePayload>
/**
 * Model SoldeSortie
 * 
 */
export type SoldeSortie = $Result.DefaultSelection<Prisma.$SoldeSortiePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.membre`: Exposes CRUD operations for the **Membre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Membres
    * const membres = await prisma.membre.findMany()
    * ```
    */
  get membre(): Prisma.MembreDelegate<ExtArgs>;

  /**
   * `prisma.mission`: Exposes CRUD operations for the **Mission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Missions
    * const missions = await prisma.mission.findMany()
    * ```
    */
  get mission(): Prisma.MissionDelegate<ExtArgs>;

  /**
   * `prisma.paiementMission`: Exposes CRUD operations for the **PaiementMission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaiementMissions
    * const paiementMissions = await prisma.paiementMission.findMany()
    * ```
    */
  get paiementMission(): Prisma.PaiementMissionDelegate<ExtArgs>;

  /**
   * `prisma.cotisation`: Exposes CRUD operations for the **Cotisation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cotisations
    * const cotisations = await prisma.cotisation.findMany()
    * ```
    */
  get cotisation(): Prisma.CotisationDelegate<ExtArgs>;

  /**
   * `prisma.caisseSociale`: Exposes CRUD operations for the **CaisseSociale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaisseSociales
    * const caisseSociales = await prisma.caisseSociale.findMany()
    * ```
    */
  get caisseSociale(): Prisma.CaisseSocialeDelegate<ExtArgs>;

  /**
   * `prisma.soldeEntree`: Exposes CRUD operations for the **SoldeEntree** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SoldeEntrees
    * const soldeEntrees = await prisma.soldeEntree.findMany()
    * ```
    */
  get soldeEntree(): Prisma.SoldeEntreeDelegate<ExtArgs>;

  /**
   * `prisma.soldeSortie`: Exposes CRUD operations for the **SoldeSortie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SoldeSorties
    * const soldeSorties = await prisma.soldeSortie.findMany()
    * ```
    */
  get soldeSortie(): Prisma.SoldeSortieDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Membre: 'Membre',
    Mission: 'Mission',
    PaiementMission: 'PaiementMission',
    Cotisation: 'Cotisation',
    CaisseSociale: 'CaisseSociale',
    SoldeEntree: 'SoldeEntree',
    SoldeSortie: 'SoldeSortie'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "membre" | "mission" | "paiementMission" | "cotisation" | "caisseSociale" | "soldeEntree" | "soldeSortie"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Membre: {
        payload: Prisma.$MembrePayload<ExtArgs>
        fields: Prisma.MembreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MembreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MembreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembrePayload>
          }
          findFirst: {
            args: Prisma.MembreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MembreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembrePayload>
          }
          findMany: {
            args: Prisma.MembreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembrePayload>[]
          }
          create: {
            args: Prisma.MembreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembrePayload>
          }
          createMany: {
            args: Prisma.MembreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MembreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembrePayload>
          }
          update: {
            args: Prisma.MembreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembrePayload>
          }
          deleteMany: {
            args: Prisma.MembreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MembreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MembreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MembrePayload>
          }
          aggregate: {
            args: Prisma.MembreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMembre>
          }
          groupBy: {
            args: Prisma.MembreGroupByArgs<ExtArgs>
            result: $Utils.Optional<MembreGroupByOutputType>[]
          }
          count: {
            args: Prisma.MembreCountArgs<ExtArgs>
            result: $Utils.Optional<MembreCountAggregateOutputType> | number
          }
        }
      }
      Mission: {
        payload: Prisma.$MissionPayload<ExtArgs>
        fields: Prisma.MissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          findFirst: {
            args: Prisma.MissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          findMany: {
            args: Prisma.MissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>[]
          }
          create: {
            args: Prisma.MissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          createMany: {
            args: Prisma.MissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          update: {
            args: Prisma.MissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          deleteMany: {
            args: Prisma.MissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MissionPayload>
          }
          aggregate: {
            args: Prisma.MissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMission>
          }
          groupBy: {
            args: Prisma.MissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MissionCountArgs<ExtArgs>
            result: $Utils.Optional<MissionCountAggregateOutputType> | number
          }
        }
      }
      PaiementMission: {
        payload: Prisma.$PaiementMissionPayload<ExtArgs>
        fields: Prisma.PaiementMissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaiementMissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementMissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaiementMissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementMissionPayload>
          }
          findFirst: {
            args: Prisma.PaiementMissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementMissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaiementMissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementMissionPayload>
          }
          findMany: {
            args: Prisma.PaiementMissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementMissionPayload>[]
          }
          create: {
            args: Prisma.PaiementMissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementMissionPayload>
          }
          createMany: {
            args: Prisma.PaiementMissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PaiementMissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementMissionPayload>
          }
          update: {
            args: Prisma.PaiementMissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementMissionPayload>
          }
          deleteMany: {
            args: Prisma.PaiementMissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaiementMissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaiementMissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaiementMissionPayload>
          }
          aggregate: {
            args: Prisma.PaiementMissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaiementMission>
          }
          groupBy: {
            args: Prisma.PaiementMissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaiementMissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaiementMissionCountArgs<ExtArgs>
            result: $Utils.Optional<PaiementMissionCountAggregateOutputType> | number
          }
        }
      }
      Cotisation: {
        payload: Prisma.$CotisationPayload<ExtArgs>
        fields: Prisma.CotisationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CotisationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotisationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CotisationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotisationPayload>
          }
          findFirst: {
            args: Prisma.CotisationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotisationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CotisationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotisationPayload>
          }
          findMany: {
            args: Prisma.CotisationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotisationPayload>[]
          }
          create: {
            args: Prisma.CotisationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotisationPayload>
          }
          createMany: {
            args: Prisma.CotisationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CotisationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotisationPayload>
          }
          update: {
            args: Prisma.CotisationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotisationPayload>
          }
          deleteMany: {
            args: Prisma.CotisationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CotisationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CotisationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CotisationPayload>
          }
          aggregate: {
            args: Prisma.CotisationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCotisation>
          }
          groupBy: {
            args: Prisma.CotisationGroupByArgs<ExtArgs>
            result: $Utils.Optional<CotisationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CotisationCountArgs<ExtArgs>
            result: $Utils.Optional<CotisationCountAggregateOutputType> | number
          }
        }
      }
      CaisseSociale: {
        payload: Prisma.$CaisseSocialePayload<ExtArgs>
        fields: Prisma.CaisseSocialeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaisseSocialeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaisseSocialePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaisseSocialeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaisseSocialePayload>
          }
          findFirst: {
            args: Prisma.CaisseSocialeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaisseSocialePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaisseSocialeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaisseSocialePayload>
          }
          findMany: {
            args: Prisma.CaisseSocialeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaisseSocialePayload>[]
          }
          create: {
            args: Prisma.CaisseSocialeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaisseSocialePayload>
          }
          createMany: {
            args: Prisma.CaisseSocialeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CaisseSocialeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaisseSocialePayload>
          }
          update: {
            args: Prisma.CaisseSocialeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaisseSocialePayload>
          }
          deleteMany: {
            args: Prisma.CaisseSocialeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaisseSocialeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CaisseSocialeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaisseSocialePayload>
          }
          aggregate: {
            args: Prisma.CaisseSocialeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaisseSociale>
          }
          groupBy: {
            args: Prisma.CaisseSocialeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaisseSocialeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaisseSocialeCountArgs<ExtArgs>
            result: $Utils.Optional<CaisseSocialeCountAggregateOutputType> | number
          }
        }
      }
      SoldeEntree: {
        payload: Prisma.$SoldeEntreePayload<ExtArgs>
        fields: Prisma.SoldeEntreeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SoldeEntreeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeEntreePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SoldeEntreeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeEntreePayload>
          }
          findFirst: {
            args: Prisma.SoldeEntreeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeEntreePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SoldeEntreeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeEntreePayload>
          }
          findMany: {
            args: Prisma.SoldeEntreeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeEntreePayload>[]
          }
          create: {
            args: Prisma.SoldeEntreeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeEntreePayload>
          }
          createMany: {
            args: Prisma.SoldeEntreeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SoldeEntreeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeEntreePayload>
          }
          update: {
            args: Prisma.SoldeEntreeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeEntreePayload>
          }
          deleteMany: {
            args: Prisma.SoldeEntreeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SoldeEntreeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SoldeEntreeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeEntreePayload>
          }
          aggregate: {
            args: Prisma.SoldeEntreeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSoldeEntree>
          }
          groupBy: {
            args: Prisma.SoldeEntreeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SoldeEntreeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SoldeEntreeCountArgs<ExtArgs>
            result: $Utils.Optional<SoldeEntreeCountAggregateOutputType> | number
          }
        }
      }
      SoldeSortie: {
        payload: Prisma.$SoldeSortiePayload<ExtArgs>
        fields: Prisma.SoldeSortieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SoldeSortieFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeSortiePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SoldeSortieFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeSortiePayload>
          }
          findFirst: {
            args: Prisma.SoldeSortieFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeSortiePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SoldeSortieFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeSortiePayload>
          }
          findMany: {
            args: Prisma.SoldeSortieFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeSortiePayload>[]
          }
          create: {
            args: Prisma.SoldeSortieCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeSortiePayload>
          }
          createMany: {
            args: Prisma.SoldeSortieCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SoldeSortieDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeSortiePayload>
          }
          update: {
            args: Prisma.SoldeSortieUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeSortiePayload>
          }
          deleteMany: {
            args: Prisma.SoldeSortieDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SoldeSortieUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SoldeSortieUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoldeSortiePayload>
          }
          aggregate: {
            args: Prisma.SoldeSortieAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSoldeSortie>
          }
          groupBy: {
            args: Prisma.SoldeSortieGroupByArgs<ExtArgs>
            result: $Utils.Optional<SoldeSortieGroupByOutputType>[]
          }
          count: {
            args: Prisma.SoldeSortieCountArgs<ExtArgs>
            result: $Utils.Optional<SoldeSortieCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MembreCountOutputType
   */

  export type MembreCountOutputType = {
    cotisations: number
    missions: number
    paiementsMission: number
  }

  export type MembreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cotisations?: boolean | MembreCountOutputTypeCountCotisationsArgs
    missions?: boolean | MembreCountOutputTypeCountMissionsArgs
    paiementsMission?: boolean | MembreCountOutputTypeCountPaiementsMissionArgs
  }

  // Custom InputTypes
  /**
   * MembreCountOutputType without action
   */
  export type MembreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MembreCountOutputType
     */
    select?: MembreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MembreCountOutputType without action
   */
  export type MembreCountOutputTypeCountCotisationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CotisationWhereInput
  }

  /**
   * MembreCountOutputType without action
   */
  export type MembreCountOutputTypeCountMissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MissionWhereInput
  }

  /**
   * MembreCountOutputType without action
   */
  export type MembreCountOutputTypeCountPaiementsMissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaiementMissionWhereInput
  }


  /**
   * Count Type MissionCountOutputType
   */

  export type MissionCountOutputType = {
    paiements: number
  }

  export type MissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paiements?: boolean | MissionCountOutputTypeCountPaiementsArgs
  }

  // Custom InputTypes
  /**
   * MissionCountOutputType without action
   */
  export type MissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MissionCountOutputType
     */
    select?: MissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MissionCountOutputType without action
   */
  export type MissionCountOutputTypeCountPaiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaiementMissionWhereInput
  }


  /**
   * Count Type CaisseSocialeCountOutputType
   */

  export type CaisseSocialeCountOutputType = {
    entrees: number
    sorties: number
  }

  export type CaisseSocialeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entrees?: boolean | CaisseSocialeCountOutputTypeCountEntreesArgs
    sorties?: boolean | CaisseSocialeCountOutputTypeCountSortiesArgs
  }

  // Custom InputTypes
  /**
   * CaisseSocialeCountOutputType without action
   */
  export type CaisseSocialeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaisseSocialeCountOutputType
     */
    select?: CaisseSocialeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CaisseSocialeCountOutputType without action
   */
  export type CaisseSocialeCountOutputTypeCountEntreesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoldeEntreeWhereInput
  }

  /**
   * CaisseSocialeCountOutputType without action
   */
  export type CaisseSocialeCountOutputTypeCountSortiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoldeSortieWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Model Membre
   */

  export type AggregateMembre = {
    _count: MembreCountAggregateOutputType | null
    _avg: MembreAvgAggregateOutputType | null
    _sum: MembreSumAggregateOutputType | null
    _min: MembreMinAggregateOutputType | null
    _max: MembreMaxAggregateOutputType | null
  }

  export type MembreAvgAggregateOutputType = {
    id: number | null
  }

  export type MembreSumAggregateOutputType = {
    id: number | null
  }

  export type MembreMinAggregateOutputType = {
    id: number | null
    nom: string | null
    poste: string | null
    email: string | null
  }

  export type MembreMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    poste: string | null
    email: string | null
  }

  export type MembreCountAggregateOutputType = {
    id: number
    nom: number
    poste: number
    email: number
    _all: number
  }


  export type MembreAvgAggregateInputType = {
    id?: true
  }

  export type MembreSumAggregateInputType = {
    id?: true
  }

  export type MembreMinAggregateInputType = {
    id?: true
    nom?: true
    poste?: true
    email?: true
  }

  export type MembreMaxAggregateInputType = {
    id?: true
    nom?: true
    poste?: true
    email?: true
  }

  export type MembreCountAggregateInputType = {
    id?: true
    nom?: true
    poste?: true
    email?: true
    _all?: true
  }

  export type MembreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Membre to aggregate.
     */
    where?: MembreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Membres to fetch.
     */
    orderBy?: MembreOrderByWithRelationInput | MembreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MembreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Membres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Membres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Membres
    **/
    _count?: true | MembreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MembreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MembreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MembreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MembreMaxAggregateInputType
  }

  export type GetMembreAggregateType<T extends MembreAggregateArgs> = {
        [P in keyof T & keyof AggregateMembre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMembre[P]>
      : GetScalarType<T[P], AggregateMembre[P]>
  }




  export type MembreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MembreWhereInput
    orderBy?: MembreOrderByWithAggregationInput | MembreOrderByWithAggregationInput[]
    by: MembreScalarFieldEnum[] | MembreScalarFieldEnum
    having?: MembreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MembreCountAggregateInputType | true
    _avg?: MembreAvgAggregateInputType
    _sum?: MembreSumAggregateInputType
    _min?: MembreMinAggregateInputType
    _max?: MembreMaxAggregateInputType
  }

  export type MembreGroupByOutputType = {
    id: number
    nom: string
    poste: string
    email: string
    _count: MembreCountAggregateOutputType | null
    _avg: MembreAvgAggregateOutputType | null
    _sum: MembreSumAggregateOutputType | null
    _min: MembreMinAggregateOutputType | null
    _max: MembreMaxAggregateOutputType | null
  }

  type GetMembreGroupByPayload<T extends MembreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MembreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MembreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MembreGroupByOutputType[P]>
            : GetScalarType<T[P], MembreGroupByOutputType[P]>
        }
      >
    >


  export type MembreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    poste?: boolean
    email?: boolean
    cotisations?: boolean | Membre$cotisationsArgs<ExtArgs>
    missions?: boolean | Membre$missionsArgs<ExtArgs>
    paiementsMission?: boolean | Membre$paiementsMissionArgs<ExtArgs>
    _count?: boolean | MembreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["membre"]>


  export type MembreSelectScalar = {
    id?: boolean
    nom?: boolean
    poste?: boolean
    email?: boolean
  }

  export type MembreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cotisations?: boolean | Membre$cotisationsArgs<ExtArgs>
    missions?: boolean | Membre$missionsArgs<ExtArgs>
    paiementsMission?: boolean | Membre$paiementsMissionArgs<ExtArgs>
    _count?: boolean | MembreCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MembrePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Membre"
    objects: {
      cotisations: Prisma.$CotisationPayload<ExtArgs>[]
      missions: Prisma.$MissionPayload<ExtArgs>[]
      paiementsMission: Prisma.$PaiementMissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      poste: string
      email: string
    }, ExtArgs["result"]["membre"]>
    composites: {}
  }

  type MembreGetPayload<S extends boolean | null | undefined | MembreDefaultArgs> = $Result.GetResult<Prisma.$MembrePayload, S>

  type MembreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MembreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MembreCountAggregateInputType | true
    }

  export interface MembreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Membre'], meta: { name: 'Membre' } }
    /**
     * Find zero or one Membre that matches the filter.
     * @param {MembreFindUniqueArgs} args - Arguments to find a Membre
     * @example
     * // Get one Membre
     * const membre = await prisma.membre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MembreFindUniqueArgs>(args: SelectSubset<T, MembreFindUniqueArgs<ExtArgs>>): Prisma__MembreClient<$Result.GetResult<Prisma.$MembrePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Membre that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MembreFindUniqueOrThrowArgs} args - Arguments to find a Membre
     * @example
     * // Get one Membre
     * const membre = await prisma.membre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MembreFindUniqueOrThrowArgs>(args: SelectSubset<T, MembreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MembreClient<$Result.GetResult<Prisma.$MembrePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Membre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembreFindFirstArgs} args - Arguments to find a Membre
     * @example
     * // Get one Membre
     * const membre = await prisma.membre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MembreFindFirstArgs>(args?: SelectSubset<T, MembreFindFirstArgs<ExtArgs>>): Prisma__MembreClient<$Result.GetResult<Prisma.$MembrePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Membre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembreFindFirstOrThrowArgs} args - Arguments to find a Membre
     * @example
     * // Get one Membre
     * const membre = await prisma.membre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MembreFindFirstOrThrowArgs>(args?: SelectSubset<T, MembreFindFirstOrThrowArgs<ExtArgs>>): Prisma__MembreClient<$Result.GetResult<Prisma.$MembrePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Membres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Membres
     * const membres = await prisma.membre.findMany()
     * 
     * // Get first 10 Membres
     * const membres = await prisma.membre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const membreWithIdOnly = await prisma.membre.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MembreFindManyArgs>(args?: SelectSubset<T, MembreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MembrePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Membre.
     * @param {MembreCreateArgs} args - Arguments to create a Membre.
     * @example
     * // Create one Membre
     * const Membre = await prisma.membre.create({
     *   data: {
     *     // ... data to create a Membre
     *   }
     * })
     * 
     */
    create<T extends MembreCreateArgs>(args: SelectSubset<T, MembreCreateArgs<ExtArgs>>): Prisma__MembreClient<$Result.GetResult<Prisma.$MembrePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Membres.
     * @param {MembreCreateManyArgs} args - Arguments to create many Membres.
     * @example
     * // Create many Membres
     * const membre = await prisma.membre.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MembreCreateManyArgs>(args?: SelectSubset<T, MembreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Membre.
     * @param {MembreDeleteArgs} args - Arguments to delete one Membre.
     * @example
     * // Delete one Membre
     * const Membre = await prisma.membre.delete({
     *   where: {
     *     // ... filter to delete one Membre
     *   }
     * })
     * 
     */
    delete<T extends MembreDeleteArgs>(args: SelectSubset<T, MembreDeleteArgs<ExtArgs>>): Prisma__MembreClient<$Result.GetResult<Prisma.$MembrePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Membre.
     * @param {MembreUpdateArgs} args - Arguments to update one Membre.
     * @example
     * // Update one Membre
     * const membre = await prisma.membre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MembreUpdateArgs>(args: SelectSubset<T, MembreUpdateArgs<ExtArgs>>): Prisma__MembreClient<$Result.GetResult<Prisma.$MembrePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Membres.
     * @param {MembreDeleteManyArgs} args - Arguments to filter Membres to delete.
     * @example
     * // Delete a few Membres
     * const { count } = await prisma.membre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MembreDeleteManyArgs>(args?: SelectSubset<T, MembreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Membres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Membres
     * const membre = await prisma.membre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MembreUpdateManyArgs>(args: SelectSubset<T, MembreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Membre.
     * @param {MembreUpsertArgs} args - Arguments to update or create a Membre.
     * @example
     * // Update or create a Membre
     * const membre = await prisma.membre.upsert({
     *   create: {
     *     // ... data to create a Membre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Membre we want to update
     *   }
     * })
     */
    upsert<T extends MembreUpsertArgs>(args: SelectSubset<T, MembreUpsertArgs<ExtArgs>>): Prisma__MembreClient<$Result.GetResult<Prisma.$MembrePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Membres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembreCountArgs} args - Arguments to filter Membres to count.
     * @example
     * // Count the number of Membres
     * const count = await prisma.membre.count({
     *   where: {
     *     // ... the filter for the Membres we want to count
     *   }
     * })
    **/
    count<T extends MembreCountArgs>(
      args?: Subset<T, MembreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MembreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Membre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MembreAggregateArgs>(args: Subset<T, MembreAggregateArgs>): Prisma.PrismaPromise<GetMembreAggregateType<T>>

    /**
     * Group by Membre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MembreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MembreGroupByArgs['orderBy'] }
        : { orderBy?: MembreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MembreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMembreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Membre model
   */
  readonly fields: MembreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Membre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MembreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cotisations<T extends Membre$cotisationsArgs<ExtArgs> = {}>(args?: Subset<T, Membre$cotisationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CotisationPayload<ExtArgs>, T, "findMany"> | Null>
    missions<T extends Membre$missionsArgs<ExtArgs> = {}>(args?: Subset<T, Membre$missionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findMany"> | Null>
    paiementsMission<T extends Membre$paiementsMissionArgs<ExtArgs> = {}>(args?: Subset<T, Membre$paiementsMissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementMissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Membre model
   */ 
  interface MembreFieldRefs {
    readonly id: FieldRef<"Membre", 'Int'>
    readonly nom: FieldRef<"Membre", 'String'>
    readonly poste: FieldRef<"Membre", 'String'>
    readonly email: FieldRef<"Membre", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Membre findUnique
   */
  export type MembreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membre
     */
    select?: MembreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembreInclude<ExtArgs> | null
    /**
     * Filter, which Membre to fetch.
     */
    where: MembreWhereUniqueInput
  }

  /**
   * Membre findUniqueOrThrow
   */
  export type MembreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membre
     */
    select?: MembreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembreInclude<ExtArgs> | null
    /**
     * Filter, which Membre to fetch.
     */
    where: MembreWhereUniqueInput
  }

  /**
   * Membre findFirst
   */
  export type MembreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membre
     */
    select?: MembreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembreInclude<ExtArgs> | null
    /**
     * Filter, which Membre to fetch.
     */
    where?: MembreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Membres to fetch.
     */
    orderBy?: MembreOrderByWithRelationInput | MembreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Membres.
     */
    cursor?: MembreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Membres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Membres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Membres.
     */
    distinct?: MembreScalarFieldEnum | MembreScalarFieldEnum[]
  }

  /**
   * Membre findFirstOrThrow
   */
  export type MembreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membre
     */
    select?: MembreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembreInclude<ExtArgs> | null
    /**
     * Filter, which Membre to fetch.
     */
    where?: MembreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Membres to fetch.
     */
    orderBy?: MembreOrderByWithRelationInput | MembreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Membres.
     */
    cursor?: MembreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Membres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Membres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Membres.
     */
    distinct?: MembreScalarFieldEnum | MembreScalarFieldEnum[]
  }

  /**
   * Membre findMany
   */
  export type MembreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membre
     */
    select?: MembreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembreInclude<ExtArgs> | null
    /**
     * Filter, which Membres to fetch.
     */
    where?: MembreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Membres to fetch.
     */
    orderBy?: MembreOrderByWithRelationInput | MembreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Membres.
     */
    cursor?: MembreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Membres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Membres.
     */
    skip?: number
    distinct?: MembreScalarFieldEnum | MembreScalarFieldEnum[]
  }

  /**
   * Membre create
   */
  export type MembreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membre
     */
    select?: MembreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembreInclude<ExtArgs> | null
    /**
     * The data needed to create a Membre.
     */
    data: XOR<MembreCreateInput, MembreUncheckedCreateInput>
  }

  /**
   * Membre createMany
   */
  export type MembreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Membres.
     */
    data: MembreCreateManyInput | MembreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Membre update
   */
  export type MembreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membre
     */
    select?: MembreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembreInclude<ExtArgs> | null
    /**
     * The data needed to update a Membre.
     */
    data: XOR<MembreUpdateInput, MembreUncheckedUpdateInput>
    /**
     * Choose, which Membre to update.
     */
    where: MembreWhereUniqueInput
  }

  /**
   * Membre updateMany
   */
  export type MembreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Membres.
     */
    data: XOR<MembreUpdateManyMutationInput, MembreUncheckedUpdateManyInput>
    /**
     * Filter which Membres to update
     */
    where?: MembreWhereInput
  }

  /**
   * Membre upsert
   */
  export type MembreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membre
     */
    select?: MembreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembreInclude<ExtArgs> | null
    /**
     * The filter to search for the Membre to update in case it exists.
     */
    where: MembreWhereUniqueInput
    /**
     * In case the Membre found by the `where` argument doesn't exist, create a new Membre with this data.
     */
    create: XOR<MembreCreateInput, MembreUncheckedCreateInput>
    /**
     * In case the Membre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MembreUpdateInput, MembreUncheckedUpdateInput>
  }

  /**
   * Membre delete
   */
  export type MembreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membre
     */
    select?: MembreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembreInclude<ExtArgs> | null
    /**
     * Filter which Membre to delete.
     */
    where: MembreWhereUniqueInput
  }

  /**
   * Membre deleteMany
   */
  export type MembreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Membres to delete
     */
    where?: MembreWhereInput
  }

  /**
   * Membre.cotisations
   */
  export type Membre$cotisationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotisation
     */
    select?: CotisationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotisationInclude<ExtArgs> | null
    where?: CotisationWhereInput
    orderBy?: CotisationOrderByWithRelationInput | CotisationOrderByWithRelationInput[]
    cursor?: CotisationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CotisationScalarFieldEnum | CotisationScalarFieldEnum[]
  }

  /**
   * Membre.missions
   */
  export type Membre$missionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    where?: MissionWhereInput
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    cursor?: MissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MissionScalarFieldEnum | MissionScalarFieldEnum[]
  }

  /**
   * Membre.paiementsMission
   */
  export type Membre$paiementsMissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementMission
     */
    select?: PaiementMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementMissionInclude<ExtArgs> | null
    where?: PaiementMissionWhereInput
    orderBy?: PaiementMissionOrderByWithRelationInput | PaiementMissionOrderByWithRelationInput[]
    cursor?: PaiementMissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaiementMissionScalarFieldEnum | PaiementMissionScalarFieldEnum[]
  }

  /**
   * Membre without action
   */
  export type MembreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Membre
     */
    select?: MembreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MembreInclude<ExtArgs> | null
  }


  /**
   * Model Mission
   */

  export type AggregateMission = {
    _count: MissionCountAggregateOutputType | null
    _avg: MissionAvgAggregateOutputType | null
    _sum: MissionSumAggregateOutputType | null
    _min: MissionMinAggregateOutputType | null
    _max: MissionMaxAggregateOutputType | null
  }

  export type MissionAvgAggregateOutputType = {
    id: number | null
    membreId: number | null
    montant: number | null
  }

  export type MissionSumAggregateOutputType = {
    id: number | null
    membreId: number | null
    montant: number | null
  }

  export type MissionMinAggregateOutputType = {
    id: number | null
    membreId: number | null
    montant: number | null
    mois: Date | null
  }

  export type MissionMaxAggregateOutputType = {
    id: number | null
    membreId: number | null
    montant: number | null
    mois: Date | null
  }

  export type MissionCountAggregateOutputType = {
    id: number
    membreId: number
    montant: number
    mois: number
    _all: number
  }


  export type MissionAvgAggregateInputType = {
    id?: true
    membreId?: true
    montant?: true
  }

  export type MissionSumAggregateInputType = {
    id?: true
    membreId?: true
    montant?: true
  }

  export type MissionMinAggregateInputType = {
    id?: true
    membreId?: true
    montant?: true
    mois?: true
  }

  export type MissionMaxAggregateInputType = {
    id?: true
    membreId?: true
    montant?: true
    mois?: true
  }

  export type MissionCountAggregateInputType = {
    id?: true
    membreId?: true
    montant?: true
    mois?: true
    _all?: true
  }

  export type MissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mission to aggregate.
     */
    where?: MissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Missions to fetch.
     */
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Missions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Missions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Missions
    **/
    _count?: true | MissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MissionMaxAggregateInputType
  }

  export type GetMissionAggregateType<T extends MissionAggregateArgs> = {
        [P in keyof T & keyof AggregateMission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMission[P]>
      : GetScalarType<T[P], AggregateMission[P]>
  }




  export type MissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MissionWhereInput
    orderBy?: MissionOrderByWithAggregationInput | MissionOrderByWithAggregationInput[]
    by: MissionScalarFieldEnum[] | MissionScalarFieldEnum
    having?: MissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MissionCountAggregateInputType | true
    _avg?: MissionAvgAggregateInputType
    _sum?: MissionSumAggregateInputType
    _min?: MissionMinAggregateInputType
    _max?: MissionMaxAggregateInputType
  }

  export type MissionGroupByOutputType = {
    id: number
    membreId: number
    montant: number
    mois: Date
    _count: MissionCountAggregateOutputType | null
    _avg: MissionAvgAggregateOutputType | null
    _sum: MissionSumAggregateOutputType | null
    _min: MissionMinAggregateOutputType | null
    _max: MissionMaxAggregateOutputType | null
  }

  type GetMissionGroupByPayload<T extends MissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MissionGroupByOutputType[P]>
            : GetScalarType<T[P], MissionGroupByOutputType[P]>
        }
      >
    >


  export type MissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    membreId?: boolean
    montant?: boolean
    mois?: boolean
    membre?: boolean | MembreDefaultArgs<ExtArgs>
    paiements?: boolean | Mission$paiementsArgs<ExtArgs>
    _count?: boolean | MissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mission"]>


  export type MissionSelectScalar = {
    id?: boolean
    membreId?: boolean
    montant?: boolean
    mois?: boolean
  }

  export type MissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membre?: boolean | MembreDefaultArgs<ExtArgs>
    paiements?: boolean | Mission$paiementsArgs<ExtArgs>
    _count?: boolean | MissionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mission"
    objects: {
      membre: Prisma.$MembrePayload<ExtArgs>
      paiements: Prisma.$PaiementMissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      membreId: number
      montant: number
      mois: Date
    }, ExtArgs["result"]["mission"]>
    composites: {}
  }

  type MissionGetPayload<S extends boolean | null | undefined | MissionDefaultArgs> = $Result.GetResult<Prisma.$MissionPayload, S>

  type MissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MissionCountAggregateInputType | true
    }

  export interface MissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mission'], meta: { name: 'Mission' } }
    /**
     * Find zero or one Mission that matches the filter.
     * @param {MissionFindUniqueArgs} args - Arguments to find a Mission
     * @example
     * // Get one Mission
     * const mission = await prisma.mission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MissionFindUniqueArgs>(args: SelectSubset<T, MissionFindUniqueArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Mission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MissionFindUniqueOrThrowArgs} args - Arguments to find a Mission
     * @example
     * // Get one Mission
     * const mission = await prisma.mission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MissionFindUniqueOrThrowArgs>(args: SelectSubset<T, MissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Mission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionFindFirstArgs} args - Arguments to find a Mission
     * @example
     * // Get one Mission
     * const mission = await prisma.mission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MissionFindFirstArgs>(args?: SelectSubset<T, MissionFindFirstArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Mission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionFindFirstOrThrowArgs} args - Arguments to find a Mission
     * @example
     * // Get one Mission
     * const mission = await prisma.mission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MissionFindFirstOrThrowArgs>(args?: SelectSubset<T, MissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Missions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Missions
     * const missions = await prisma.mission.findMany()
     * 
     * // Get first 10 Missions
     * const missions = await prisma.mission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const missionWithIdOnly = await prisma.mission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MissionFindManyArgs>(args?: SelectSubset<T, MissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Mission.
     * @param {MissionCreateArgs} args - Arguments to create a Mission.
     * @example
     * // Create one Mission
     * const Mission = await prisma.mission.create({
     *   data: {
     *     // ... data to create a Mission
     *   }
     * })
     * 
     */
    create<T extends MissionCreateArgs>(args: SelectSubset<T, MissionCreateArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Missions.
     * @param {MissionCreateManyArgs} args - Arguments to create many Missions.
     * @example
     * // Create many Missions
     * const mission = await prisma.mission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MissionCreateManyArgs>(args?: SelectSubset<T, MissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mission.
     * @param {MissionDeleteArgs} args - Arguments to delete one Mission.
     * @example
     * // Delete one Mission
     * const Mission = await prisma.mission.delete({
     *   where: {
     *     // ... filter to delete one Mission
     *   }
     * })
     * 
     */
    delete<T extends MissionDeleteArgs>(args: SelectSubset<T, MissionDeleteArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Mission.
     * @param {MissionUpdateArgs} args - Arguments to update one Mission.
     * @example
     * // Update one Mission
     * const mission = await prisma.mission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MissionUpdateArgs>(args: SelectSubset<T, MissionUpdateArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Missions.
     * @param {MissionDeleteManyArgs} args - Arguments to filter Missions to delete.
     * @example
     * // Delete a few Missions
     * const { count } = await prisma.mission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MissionDeleteManyArgs>(args?: SelectSubset<T, MissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Missions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Missions
     * const mission = await prisma.mission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MissionUpdateManyArgs>(args: SelectSubset<T, MissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mission.
     * @param {MissionUpsertArgs} args - Arguments to update or create a Mission.
     * @example
     * // Update or create a Mission
     * const mission = await prisma.mission.upsert({
     *   create: {
     *     // ... data to create a Mission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mission we want to update
     *   }
     * })
     */
    upsert<T extends MissionUpsertArgs>(args: SelectSubset<T, MissionUpsertArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Missions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionCountArgs} args - Arguments to filter Missions to count.
     * @example
     * // Count the number of Missions
     * const count = await prisma.mission.count({
     *   where: {
     *     // ... the filter for the Missions we want to count
     *   }
     * })
    **/
    count<T extends MissionCountArgs>(
      args?: Subset<T, MissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MissionAggregateArgs>(args: Subset<T, MissionAggregateArgs>): Prisma.PrismaPromise<GetMissionAggregateType<T>>

    /**
     * Group by Mission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MissionGroupByArgs['orderBy'] }
        : { orderBy?: MissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mission model
   */
  readonly fields: MissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    membre<T extends MembreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MembreDefaultArgs<ExtArgs>>): Prisma__MembreClient<$Result.GetResult<Prisma.$MembrePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    paiements<T extends Mission$paiementsArgs<ExtArgs> = {}>(args?: Subset<T, Mission$paiementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementMissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Mission model
   */ 
  interface MissionFieldRefs {
    readonly id: FieldRef<"Mission", 'Int'>
    readonly membreId: FieldRef<"Mission", 'Int'>
    readonly montant: FieldRef<"Mission", 'Float'>
    readonly mois: FieldRef<"Mission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Mission findUnique
   */
  export type MissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Mission to fetch.
     */
    where: MissionWhereUniqueInput
  }

  /**
   * Mission findUniqueOrThrow
   */
  export type MissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Mission to fetch.
     */
    where: MissionWhereUniqueInput
  }

  /**
   * Mission findFirst
   */
  export type MissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Mission to fetch.
     */
    where?: MissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Missions to fetch.
     */
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Missions.
     */
    cursor?: MissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Missions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Missions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Missions.
     */
    distinct?: MissionScalarFieldEnum | MissionScalarFieldEnum[]
  }

  /**
   * Mission findFirstOrThrow
   */
  export type MissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Mission to fetch.
     */
    where?: MissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Missions to fetch.
     */
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Missions.
     */
    cursor?: MissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Missions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Missions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Missions.
     */
    distinct?: MissionScalarFieldEnum | MissionScalarFieldEnum[]
  }

  /**
   * Mission findMany
   */
  export type MissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter, which Missions to fetch.
     */
    where?: MissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Missions to fetch.
     */
    orderBy?: MissionOrderByWithRelationInput | MissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Missions.
     */
    cursor?: MissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Missions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Missions.
     */
    skip?: number
    distinct?: MissionScalarFieldEnum | MissionScalarFieldEnum[]
  }

  /**
   * Mission create
   */
  export type MissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Mission.
     */
    data: XOR<MissionCreateInput, MissionUncheckedCreateInput>
  }

  /**
   * Mission createMany
   */
  export type MissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Missions.
     */
    data: MissionCreateManyInput | MissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mission update
   */
  export type MissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Mission.
     */
    data: XOR<MissionUpdateInput, MissionUncheckedUpdateInput>
    /**
     * Choose, which Mission to update.
     */
    where: MissionWhereUniqueInput
  }

  /**
   * Mission updateMany
   */
  export type MissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Missions.
     */
    data: XOR<MissionUpdateManyMutationInput, MissionUncheckedUpdateManyInput>
    /**
     * Filter which Missions to update
     */
    where?: MissionWhereInput
  }

  /**
   * Mission upsert
   */
  export type MissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Mission to update in case it exists.
     */
    where: MissionWhereUniqueInput
    /**
     * In case the Mission found by the `where` argument doesn't exist, create a new Mission with this data.
     */
    create: XOR<MissionCreateInput, MissionUncheckedCreateInput>
    /**
     * In case the Mission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MissionUpdateInput, MissionUncheckedUpdateInput>
  }

  /**
   * Mission delete
   */
  export type MissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
    /**
     * Filter which Mission to delete.
     */
    where: MissionWhereUniqueInput
  }

  /**
   * Mission deleteMany
   */
  export type MissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Missions to delete
     */
    where?: MissionWhereInput
  }

  /**
   * Mission.paiements
   */
  export type Mission$paiementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementMission
     */
    select?: PaiementMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementMissionInclude<ExtArgs> | null
    where?: PaiementMissionWhereInput
    orderBy?: PaiementMissionOrderByWithRelationInput | PaiementMissionOrderByWithRelationInput[]
    cursor?: PaiementMissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaiementMissionScalarFieldEnum | PaiementMissionScalarFieldEnum[]
  }

  /**
   * Mission without action
   */
  export type MissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mission
     */
    select?: MissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MissionInclude<ExtArgs> | null
  }


  /**
   * Model PaiementMission
   */

  export type AggregatePaiementMission = {
    _count: PaiementMissionCountAggregateOutputType | null
    _avg: PaiementMissionAvgAggregateOutputType | null
    _sum: PaiementMissionSumAggregateOutputType | null
    _min: PaiementMissionMinAggregateOutputType | null
    _max: PaiementMissionMaxAggregateOutputType | null
  }

  export type PaiementMissionAvgAggregateOutputType = {
    id: number | null
    membreId: number | null
    missionId: number | null
    montant: number | null
    restePayer: number | null
  }

  export type PaiementMissionSumAggregateOutputType = {
    id: number | null
    membreId: number | null
    missionId: number | null
    montant: number | null
    restePayer: number | null
  }

  export type PaiementMissionMinAggregateOutputType = {
    id: number | null
    datePaiement: Date | null
    membreId: number | null
    missionId: number | null
    montant: number | null
    restePayer: number | null
  }

  export type PaiementMissionMaxAggregateOutputType = {
    id: number | null
    datePaiement: Date | null
    membreId: number | null
    missionId: number | null
    montant: number | null
    restePayer: number | null
  }

  export type PaiementMissionCountAggregateOutputType = {
    id: number
    datePaiement: number
    membreId: number
    missionId: number
    montant: number
    restePayer: number
    _all: number
  }


  export type PaiementMissionAvgAggregateInputType = {
    id?: true
    membreId?: true
    missionId?: true
    montant?: true
    restePayer?: true
  }

  export type PaiementMissionSumAggregateInputType = {
    id?: true
    membreId?: true
    missionId?: true
    montant?: true
    restePayer?: true
  }

  export type PaiementMissionMinAggregateInputType = {
    id?: true
    datePaiement?: true
    membreId?: true
    missionId?: true
    montant?: true
    restePayer?: true
  }

  export type PaiementMissionMaxAggregateInputType = {
    id?: true
    datePaiement?: true
    membreId?: true
    missionId?: true
    montant?: true
    restePayer?: true
  }

  export type PaiementMissionCountAggregateInputType = {
    id?: true
    datePaiement?: true
    membreId?: true
    missionId?: true
    montant?: true
    restePayer?: true
    _all?: true
  }

  export type PaiementMissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaiementMission to aggregate.
     */
    where?: PaiementMissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaiementMissions to fetch.
     */
    orderBy?: PaiementMissionOrderByWithRelationInput | PaiementMissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaiementMissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaiementMissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaiementMissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaiementMissions
    **/
    _count?: true | PaiementMissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaiementMissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaiementMissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaiementMissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaiementMissionMaxAggregateInputType
  }

  export type GetPaiementMissionAggregateType<T extends PaiementMissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePaiementMission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaiementMission[P]>
      : GetScalarType<T[P], AggregatePaiementMission[P]>
  }




  export type PaiementMissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaiementMissionWhereInput
    orderBy?: PaiementMissionOrderByWithAggregationInput | PaiementMissionOrderByWithAggregationInput[]
    by: PaiementMissionScalarFieldEnum[] | PaiementMissionScalarFieldEnum
    having?: PaiementMissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaiementMissionCountAggregateInputType | true
    _avg?: PaiementMissionAvgAggregateInputType
    _sum?: PaiementMissionSumAggregateInputType
    _min?: PaiementMissionMinAggregateInputType
    _max?: PaiementMissionMaxAggregateInputType
  }

  export type PaiementMissionGroupByOutputType = {
    id: number
    datePaiement: Date
    membreId: number
    missionId: number
    montant: number
    restePayer: number
    _count: PaiementMissionCountAggregateOutputType | null
    _avg: PaiementMissionAvgAggregateOutputType | null
    _sum: PaiementMissionSumAggregateOutputType | null
    _min: PaiementMissionMinAggregateOutputType | null
    _max: PaiementMissionMaxAggregateOutputType | null
  }

  type GetPaiementMissionGroupByPayload<T extends PaiementMissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaiementMissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaiementMissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaiementMissionGroupByOutputType[P]>
            : GetScalarType<T[P], PaiementMissionGroupByOutputType[P]>
        }
      >
    >


  export type PaiementMissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    datePaiement?: boolean
    membreId?: boolean
    missionId?: boolean
    montant?: boolean
    restePayer?: boolean
    membre?: boolean | MembreDefaultArgs<ExtArgs>
    mission?: boolean | MissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paiementMission"]>


  export type PaiementMissionSelectScalar = {
    id?: boolean
    datePaiement?: boolean
    membreId?: boolean
    missionId?: boolean
    montant?: boolean
    restePayer?: boolean
  }

  export type PaiementMissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membre?: boolean | MembreDefaultArgs<ExtArgs>
    mission?: boolean | MissionDefaultArgs<ExtArgs>
  }

  export type $PaiementMissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaiementMission"
    objects: {
      membre: Prisma.$MembrePayload<ExtArgs>
      mission: Prisma.$MissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      datePaiement: Date
      membreId: number
      missionId: number
      montant: number
      restePayer: number
    }, ExtArgs["result"]["paiementMission"]>
    composites: {}
  }

  type PaiementMissionGetPayload<S extends boolean | null | undefined | PaiementMissionDefaultArgs> = $Result.GetResult<Prisma.$PaiementMissionPayload, S>

  type PaiementMissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaiementMissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaiementMissionCountAggregateInputType | true
    }

  export interface PaiementMissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaiementMission'], meta: { name: 'PaiementMission' } }
    /**
     * Find zero or one PaiementMission that matches the filter.
     * @param {PaiementMissionFindUniqueArgs} args - Arguments to find a PaiementMission
     * @example
     * // Get one PaiementMission
     * const paiementMission = await prisma.paiementMission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaiementMissionFindUniqueArgs>(args: SelectSubset<T, PaiementMissionFindUniqueArgs<ExtArgs>>): Prisma__PaiementMissionClient<$Result.GetResult<Prisma.$PaiementMissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PaiementMission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaiementMissionFindUniqueOrThrowArgs} args - Arguments to find a PaiementMission
     * @example
     * // Get one PaiementMission
     * const paiementMission = await prisma.paiementMission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaiementMissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PaiementMissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaiementMissionClient<$Result.GetResult<Prisma.$PaiementMissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PaiementMission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementMissionFindFirstArgs} args - Arguments to find a PaiementMission
     * @example
     * // Get one PaiementMission
     * const paiementMission = await prisma.paiementMission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaiementMissionFindFirstArgs>(args?: SelectSubset<T, PaiementMissionFindFirstArgs<ExtArgs>>): Prisma__PaiementMissionClient<$Result.GetResult<Prisma.$PaiementMissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PaiementMission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementMissionFindFirstOrThrowArgs} args - Arguments to find a PaiementMission
     * @example
     * // Get one PaiementMission
     * const paiementMission = await prisma.paiementMission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaiementMissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PaiementMissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaiementMissionClient<$Result.GetResult<Prisma.$PaiementMissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PaiementMissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementMissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaiementMissions
     * const paiementMissions = await prisma.paiementMission.findMany()
     * 
     * // Get first 10 PaiementMissions
     * const paiementMissions = await prisma.paiementMission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paiementMissionWithIdOnly = await prisma.paiementMission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaiementMissionFindManyArgs>(args?: SelectSubset<T, PaiementMissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaiementMissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PaiementMission.
     * @param {PaiementMissionCreateArgs} args - Arguments to create a PaiementMission.
     * @example
     * // Create one PaiementMission
     * const PaiementMission = await prisma.paiementMission.create({
     *   data: {
     *     // ... data to create a PaiementMission
     *   }
     * })
     * 
     */
    create<T extends PaiementMissionCreateArgs>(args: SelectSubset<T, PaiementMissionCreateArgs<ExtArgs>>): Prisma__PaiementMissionClient<$Result.GetResult<Prisma.$PaiementMissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PaiementMissions.
     * @param {PaiementMissionCreateManyArgs} args - Arguments to create many PaiementMissions.
     * @example
     * // Create many PaiementMissions
     * const paiementMission = await prisma.paiementMission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaiementMissionCreateManyArgs>(args?: SelectSubset<T, PaiementMissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PaiementMission.
     * @param {PaiementMissionDeleteArgs} args - Arguments to delete one PaiementMission.
     * @example
     * // Delete one PaiementMission
     * const PaiementMission = await prisma.paiementMission.delete({
     *   where: {
     *     // ... filter to delete one PaiementMission
     *   }
     * })
     * 
     */
    delete<T extends PaiementMissionDeleteArgs>(args: SelectSubset<T, PaiementMissionDeleteArgs<ExtArgs>>): Prisma__PaiementMissionClient<$Result.GetResult<Prisma.$PaiementMissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PaiementMission.
     * @param {PaiementMissionUpdateArgs} args - Arguments to update one PaiementMission.
     * @example
     * // Update one PaiementMission
     * const paiementMission = await prisma.paiementMission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaiementMissionUpdateArgs>(args: SelectSubset<T, PaiementMissionUpdateArgs<ExtArgs>>): Prisma__PaiementMissionClient<$Result.GetResult<Prisma.$PaiementMissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PaiementMissions.
     * @param {PaiementMissionDeleteManyArgs} args - Arguments to filter PaiementMissions to delete.
     * @example
     * // Delete a few PaiementMissions
     * const { count } = await prisma.paiementMission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaiementMissionDeleteManyArgs>(args?: SelectSubset<T, PaiementMissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaiementMissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementMissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaiementMissions
     * const paiementMission = await prisma.paiementMission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaiementMissionUpdateManyArgs>(args: SelectSubset<T, PaiementMissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaiementMission.
     * @param {PaiementMissionUpsertArgs} args - Arguments to update or create a PaiementMission.
     * @example
     * // Update or create a PaiementMission
     * const paiementMission = await prisma.paiementMission.upsert({
     *   create: {
     *     // ... data to create a PaiementMission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaiementMission we want to update
     *   }
     * })
     */
    upsert<T extends PaiementMissionUpsertArgs>(args: SelectSubset<T, PaiementMissionUpsertArgs<ExtArgs>>): Prisma__PaiementMissionClient<$Result.GetResult<Prisma.$PaiementMissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PaiementMissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementMissionCountArgs} args - Arguments to filter PaiementMissions to count.
     * @example
     * // Count the number of PaiementMissions
     * const count = await prisma.paiementMission.count({
     *   where: {
     *     // ... the filter for the PaiementMissions we want to count
     *   }
     * })
    **/
    count<T extends PaiementMissionCountArgs>(
      args?: Subset<T, PaiementMissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaiementMissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaiementMission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementMissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaiementMissionAggregateArgs>(args: Subset<T, PaiementMissionAggregateArgs>): Prisma.PrismaPromise<GetPaiementMissionAggregateType<T>>

    /**
     * Group by PaiementMission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaiementMissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaiementMissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaiementMissionGroupByArgs['orderBy'] }
        : { orderBy?: PaiementMissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaiementMissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaiementMissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaiementMission model
   */
  readonly fields: PaiementMissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaiementMission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaiementMissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    membre<T extends MembreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MembreDefaultArgs<ExtArgs>>): Prisma__MembreClient<$Result.GetResult<Prisma.$MembrePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    mission<T extends MissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MissionDefaultArgs<ExtArgs>>): Prisma__MissionClient<$Result.GetResult<Prisma.$MissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaiementMission model
   */ 
  interface PaiementMissionFieldRefs {
    readonly id: FieldRef<"PaiementMission", 'Int'>
    readonly datePaiement: FieldRef<"PaiementMission", 'DateTime'>
    readonly membreId: FieldRef<"PaiementMission", 'Int'>
    readonly missionId: FieldRef<"PaiementMission", 'Int'>
    readonly montant: FieldRef<"PaiementMission", 'Float'>
    readonly restePayer: FieldRef<"PaiementMission", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * PaiementMission findUnique
   */
  export type PaiementMissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementMission
     */
    select?: PaiementMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementMissionInclude<ExtArgs> | null
    /**
     * Filter, which PaiementMission to fetch.
     */
    where: PaiementMissionWhereUniqueInput
  }

  /**
   * PaiementMission findUniqueOrThrow
   */
  export type PaiementMissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementMission
     */
    select?: PaiementMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementMissionInclude<ExtArgs> | null
    /**
     * Filter, which PaiementMission to fetch.
     */
    where: PaiementMissionWhereUniqueInput
  }

  /**
   * PaiementMission findFirst
   */
  export type PaiementMissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementMission
     */
    select?: PaiementMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementMissionInclude<ExtArgs> | null
    /**
     * Filter, which PaiementMission to fetch.
     */
    where?: PaiementMissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaiementMissions to fetch.
     */
    orderBy?: PaiementMissionOrderByWithRelationInput | PaiementMissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaiementMissions.
     */
    cursor?: PaiementMissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaiementMissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaiementMissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaiementMissions.
     */
    distinct?: PaiementMissionScalarFieldEnum | PaiementMissionScalarFieldEnum[]
  }

  /**
   * PaiementMission findFirstOrThrow
   */
  export type PaiementMissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementMission
     */
    select?: PaiementMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementMissionInclude<ExtArgs> | null
    /**
     * Filter, which PaiementMission to fetch.
     */
    where?: PaiementMissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaiementMissions to fetch.
     */
    orderBy?: PaiementMissionOrderByWithRelationInput | PaiementMissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaiementMissions.
     */
    cursor?: PaiementMissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaiementMissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaiementMissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaiementMissions.
     */
    distinct?: PaiementMissionScalarFieldEnum | PaiementMissionScalarFieldEnum[]
  }

  /**
   * PaiementMission findMany
   */
  export type PaiementMissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementMission
     */
    select?: PaiementMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementMissionInclude<ExtArgs> | null
    /**
     * Filter, which PaiementMissions to fetch.
     */
    where?: PaiementMissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaiementMissions to fetch.
     */
    orderBy?: PaiementMissionOrderByWithRelationInput | PaiementMissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaiementMissions.
     */
    cursor?: PaiementMissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaiementMissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaiementMissions.
     */
    skip?: number
    distinct?: PaiementMissionScalarFieldEnum | PaiementMissionScalarFieldEnum[]
  }

  /**
   * PaiementMission create
   */
  export type PaiementMissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementMission
     */
    select?: PaiementMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementMissionInclude<ExtArgs> | null
    /**
     * The data needed to create a PaiementMission.
     */
    data: XOR<PaiementMissionCreateInput, PaiementMissionUncheckedCreateInput>
  }

  /**
   * PaiementMission createMany
   */
  export type PaiementMissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaiementMissions.
     */
    data: PaiementMissionCreateManyInput | PaiementMissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaiementMission update
   */
  export type PaiementMissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementMission
     */
    select?: PaiementMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementMissionInclude<ExtArgs> | null
    /**
     * The data needed to update a PaiementMission.
     */
    data: XOR<PaiementMissionUpdateInput, PaiementMissionUncheckedUpdateInput>
    /**
     * Choose, which PaiementMission to update.
     */
    where: PaiementMissionWhereUniqueInput
  }

  /**
   * PaiementMission updateMany
   */
  export type PaiementMissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaiementMissions.
     */
    data: XOR<PaiementMissionUpdateManyMutationInput, PaiementMissionUncheckedUpdateManyInput>
    /**
     * Filter which PaiementMissions to update
     */
    where?: PaiementMissionWhereInput
  }

  /**
   * PaiementMission upsert
   */
  export type PaiementMissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementMission
     */
    select?: PaiementMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementMissionInclude<ExtArgs> | null
    /**
     * The filter to search for the PaiementMission to update in case it exists.
     */
    where: PaiementMissionWhereUniqueInput
    /**
     * In case the PaiementMission found by the `where` argument doesn't exist, create a new PaiementMission with this data.
     */
    create: XOR<PaiementMissionCreateInput, PaiementMissionUncheckedCreateInput>
    /**
     * In case the PaiementMission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaiementMissionUpdateInput, PaiementMissionUncheckedUpdateInput>
  }

  /**
   * PaiementMission delete
   */
  export type PaiementMissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementMission
     */
    select?: PaiementMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementMissionInclude<ExtArgs> | null
    /**
     * Filter which PaiementMission to delete.
     */
    where: PaiementMissionWhereUniqueInput
  }

  /**
   * PaiementMission deleteMany
   */
  export type PaiementMissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaiementMissions to delete
     */
    where?: PaiementMissionWhereInput
  }

  /**
   * PaiementMission without action
   */
  export type PaiementMissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaiementMission
     */
    select?: PaiementMissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaiementMissionInclude<ExtArgs> | null
  }


  /**
   * Model Cotisation
   */

  export type AggregateCotisation = {
    _count: CotisationCountAggregateOutputType | null
    _avg: CotisationAvgAggregateOutputType | null
    _sum: CotisationSumAggregateOutputType | null
    _min: CotisationMinAggregateOutputType | null
    _max: CotisationMaxAggregateOutputType | null
  }

  export type CotisationAvgAggregateOutputType = {
    id: number | null
    membreId: number | null
    montant: number | null
  }

  export type CotisationSumAggregateOutputType = {
    id: number | null
    membreId: number | null
    montant: number | null
  }

  export type CotisationMinAggregateOutputType = {
    id: number | null
    membreId: number | null
    datePaiement: Date | null
    montant: number | null
    mois: string | null
    status: string | null
  }

  export type CotisationMaxAggregateOutputType = {
    id: number | null
    membreId: number | null
    datePaiement: Date | null
    montant: number | null
    mois: string | null
    status: string | null
  }

  export type CotisationCountAggregateOutputType = {
    id: number
    membreId: number
    datePaiement: number
    montant: number
    mois: number
    status: number
    _all: number
  }


  export type CotisationAvgAggregateInputType = {
    id?: true
    membreId?: true
    montant?: true
  }

  export type CotisationSumAggregateInputType = {
    id?: true
    membreId?: true
    montant?: true
  }

  export type CotisationMinAggregateInputType = {
    id?: true
    membreId?: true
    datePaiement?: true
    montant?: true
    mois?: true
    status?: true
  }

  export type CotisationMaxAggregateInputType = {
    id?: true
    membreId?: true
    datePaiement?: true
    montant?: true
    mois?: true
    status?: true
  }

  export type CotisationCountAggregateInputType = {
    id?: true
    membreId?: true
    datePaiement?: true
    montant?: true
    mois?: true
    status?: true
    _all?: true
  }

  export type CotisationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cotisation to aggregate.
     */
    where?: CotisationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cotisations to fetch.
     */
    orderBy?: CotisationOrderByWithRelationInput | CotisationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CotisationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cotisations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cotisations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cotisations
    **/
    _count?: true | CotisationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CotisationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CotisationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CotisationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CotisationMaxAggregateInputType
  }

  export type GetCotisationAggregateType<T extends CotisationAggregateArgs> = {
        [P in keyof T & keyof AggregateCotisation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCotisation[P]>
      : GetScalarType<T[P], AggregateCotisation[P]>
  }




  export type CotisationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CotisationWhereInput
    orderBy?: CotisationOrderByWithAggregationInput | CotisationOrderByWithAggregationInput[]
    by: CotisationScalarFieldEnum[] | CotisationScalarFieldEnum
    having?: CotisationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CotisationCountAggregateInputType | true
    _avg?: CotisationAvgAggregateInputType
    _sum?: CotisationSumAggregateInputType
    _min?: CotisationMinAggregateInputType
    _max?: CotisationMaxAggregateInputType
  }

  export type CotisationGroupByOutputType = {
    id: number
    membreId: number
    datePaiement: Date
    montant: number
    mois: string
    status: string
    _count: CotisationCountAggregateOutputType | null
    _avg: CotisationAvgAggregateOutputType | null
    _sum: CotisationSumAggregateOutputType | null
    _min: CotisationMinAggregateOutputType | null
    _max: CotisationMaxAggregateOutputType | null
  }

  type GetCotisationGroupByPayload<T extends CotisationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CotisationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CotisationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CotisationGroupByOutputType[P]>
            : GetScalarType<T[P], CotisationGroupByOutputType[P]>
        }
      >
    >


  export type CotisationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    membreId?: boolean
    datePaiement?: boolean
    montant?: boolean
    mois?: boolean
    status?: boolean
    membre?: boolean | MembreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cotisation"]>


  export type CotisationSelectScalar = {
    id?: boolean
    membreId?: boolean
    datePaiement?: boolean
    montant?: boolean
    mois?: boolean
    status?: boolean
  }

  export type CotisationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    membre?: boolean | MembreDefaultArgs<ExtArgs>
  }

  export type $CotisationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cotisation"
    objects: {
      membre: Prisma.$MembrePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      membreId: number
      datePaiement: Date
      montant: number
      mois: string
      status: string
    }, ExtArgs["result"]["cotisation"]>
    composites: {}
  }

  type CotisationGetPayload<S extends boolean | null | undefined | CotisationDefaultArgs> = $Result.GetResult<Prisma.$CotisationPayload, S>

  type CotisationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CotisationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CotisationCountAggregateInputType | true
    }

  export interface CotisationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cotisation'], meta: { name: 'Cotisation' } }
    /**
     * Find zero or one Cotisation that matches the filter.
     * @param {CotisationFindUniqueArgs} args - Arguments to find a Cotisation
     * @example
     * // Get one Cotisation
     * const cotisation = await prisma.cotisation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CotisationFindUniqueArgs>(args: SelectSubset<T, CotisationFindUniqueArgs<ExtArgs>>): Prisma__CotisationClient<$Result.GetResult<Prisma.$CotisationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cotisation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CotisationFindUniqueOrThrowArgs} args - Arguments to find a Cotisation
     * @example
     * // Get one Cotisation
     * const cotisation = await prisma.cotisation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CotisationFindUniqueOrThrowArgs>(args: SelectSubset<T, CotisationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CotisationClient<$Result.GetResult<Prisma.$CotisationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cotisation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotisationFindFirstArgs} args - Arguments to find a Cotisation
     * @example
     * // Get one Cotisation
     * const cotisation = await prisma.cotisation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CotisationFindFirstArgs>(args?: SelectSubset<T, CotisationFindFirstArgs<ExtArgs>>): Prisma__CotisationClient<$Result.GetResult<Prisma.$CotisationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cotisation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotisationFindFirstOrThrowArgs} args - Arguments to find a Cotisation
     * @example
     * // Get one Cotisation
     * const cotisation = await prisma.cotisation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CotisationFindFirstOrThrowArgs>(args?: SelectSubset<T, CotisationFindFirstOrThrowArgs<ExtArgs>>): Prisma__CotisationClient<$Result.GetResult<Prisma.$CotisationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cotisations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotisationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cotisations
     * const cotisations = await prisma.cotisation.findMany()
     * 
     * // Get first 10 Cotisations
     * const cotisations = await prisma.cotisation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cotisationWithIdOnly = await prisma.cotisation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CotisationFindManyArgs>(args?: SelectSubset<T, CotisationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CotisationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cotisation.
     * @param {CotisationCreateArgs} args - Arguments to create a Cotisation.
     * @example
     * // Create one Cotisation
     * const Cotisation = await prisma.cotisation.create({
     *   data: {
     *     // ... data to create a Cotisation
     *   }
     * })
     * 
     */
    create<T extends CotisationCreateArgs>(args: SelectSubset<T, CotisationCreateArgs<ExtArgs>>): Prisma__CotisationClient<$Result.GetResult<Prisma.$CotisationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cotisations.
     * @param {CotisationCreateManyArgs} args - Arguments to create many Cotisations.
     * @example
     * // Create many Cotisations
     * const cotisation = await prisma.cotisation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CotisationCreateManyArgs>(args?: SelectSubset<T, CotisationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cotisation.
     * @param {CotisationDeleteArgs} args - Arguments to delete one Cotisation.
     * @example
     * // Delete one Cotisation
     * const Cotisation = await prisma.cotisation.delete({
     *   where: {
     *     // ... filter to delete one Cotisation
     *   }
     * })
     * 
     */
    delete<T extends CotisationDeleteArgs>(args: SelectSubset<T, CotisationDeleteArgs<ExtArgs>>): Prisma__CotisationClient<$Result.GetResult<Prisma.$CotisationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cotisation.
     * @param {CotisationUpdateArgs} args - Arguments to update one Cotisation.
     * @example
     * // Update one Cotisation
     * const cotisation = await prisma.cotisation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CotisationUpdateArgs>(args: SelectSubset<T, CotisationUpdateArgs<ExtArgs>>): Prisma__CotisationClient<$Result.GetResult<Prisma.$CotisationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cotisations.
     * @param {CotisationDeleteManyArgs} args - Arguments to filter Cotisations to delete.
     * @example
     * // Delete a few Cotisations
     * const { count } = await prisma.cotisation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CotisationDeleteManyArgs>(args?: SelectSubset<T, CotisationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cotisations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotisationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cotisations
     * const cotisation = await prisma.cotisation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CotisationUpdateManyArgs>(args: SelectSubset<T, CotisationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cotisation.
     * @param {CotisationUpsertArgs} args - Arguments to update or create a Cotisation.
     * @example
     * // Update or create a Cotisation
     * const cotisation = await prisma.cotisation.upsert({
     *   create: {
     *     // ... data to create a Cotisation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cotisation we want to update
     *   }
     * })
     */
    upsert<T extends CotisationUpsertArgs>(args: SelectSubset<T, CotisationUpsertArgs<ExtArgs>>): Prisma__CotisationClient<$Result.GetResult<Prisma.$CotisationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cotisations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotisationCountArgs} args - Arguments to filter Cotisations to count.
     * @example
     * // Count the number of Cotisations
     * const count = await prisma.cotisation.count({
     *   where: {
     *     // ... the filter for the Cotisations we want to count
     *   }
     * })
    **/
    count<T extends CotisationCountArgs>(
      args?: Subset<T, CotisationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CotisationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cotisation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotisationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CotisationAggregateArgs>(args: Subset<T, CotisationAggregateArgs>): Prisma.PrismaPromise<GetCotisationAggregateType<T>>

    /**
     * Group by Cotisation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CotisationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CotisationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CotisationGroupByArgs['orderBy'] }
        : { orderBy?: CotisationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CotisationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCotisationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cotisation model
   */
  readonly fields: CotisationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cotisation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CotisationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    membre<T extends MembreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MembreDefaultArgs<ExtArgs>>): Prisma__MembreClient<$Result.GetResult<Prisma.$MembrePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cotisation model
   */ 
  interface CotisationFieldRefs {
    readonly id: FieldRef<"Cotisation", 'Int'>
    readonly membreId: FieldRef<"Cotisation", 'Int'>
    readonly datePaiement: FieldRef<"Cotisation", 'DateTime'>
    readonly montant: FieldRef<"Cotisation", 'Float'>
    readonly mois: FieldRef<"Cotisation", 'String'>
    readonly status: FieldRef<"Cotisation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Cotisation findUnique
   */
  export type CotisationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotisation
     */
    select?: CotisationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotisationInclude<ExtArgs> | null
    /**
     * Filter, which Cotisation to fetch.
     */
    where: CotisationWhereUniqueInput
  }

  /**
   * Cotisation findUniqueOrThrow
   */
  export type CotisationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotisation
     */
    select?: CotisationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotisationInclude<ExtArgs> | null
    /**
     * Filter, which Cotisation to fetch.
     */
    where: CotisationWhereUniqueInput
  }

  /**
   * Cotisation findFirst
   */
  export type CotisationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotisation
     */
    select?: CotisationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotisationInclude<ExtArgs> | null
    /**
     * Filter, which Cotisation to fetch.
     */
    where?: CotisationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cotisations to fetch.
     */
    orderBy?: CotisationOrderByWithRelationInput | CotisationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cotisations.
     */
    cursor?: CotisationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cotisations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cotisations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cotisations.
     */
    distinct?: CotisationScalarFieldEnum | CotisationScalarFieldEnum[]
  }

  /**
   * Cotisation findFirstOrThrow
   */
  export type CotisationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotisation
     */
    select?: CotisationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotisationInclude<ExtArgs> | null
    /**
     * Filter, which Cotisation to fetch.
     */
    where?: CotisationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cotisations to fetch.
     */
    orderBy?: CotisationOrderByWithRelationInput | CotisationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cotisations.
     */
    cursor?: CotisationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cotisations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cotisations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cotisations.
     */
    distinct?: CotisationScalarFieldEnum | CotisationScalarFieldEnum[]
  }

  /**
   * Cotisation findMany
   */
  export type CotisationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotisation
     */
    select?: CotisationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotisationInclude<ExtArgs> | null
    /**
     * Filter, which Cotisations to fetch.
     */
    where?: CotisationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cotisations to fetch.
     */
    orderBy?: CotisationOrderByWithRelationInput | CotisationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cotisations.
     */
    cursor?: CotisationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cotisations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cotisations.
     */
    skip?: number
    distinct?: CotisationScalarFieldEnum | CotisationScalarFieldEnum[]
  }

  /**
   * Cotisation create
   */
  export type CotisationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotisation
     */
    select?: CotisationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotisationInclude<ExtArgs> | null
    /**
     * The data needed to create a Cotisation.
     */
    data: XOR<CotisationCreateInput, CotisationUncheckedCreateInput>
  }

  /**
   * Cotisation createMany
   */
  export type CotisationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cotisations.
     */
    data: CotisationCreateManyInput | CotisationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cotisation update
   */
  export type CotisationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotisation
     */
    select?: CotisationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotisationInclude<ExtArgs> | null
    /**
     * The data needed to update a Cotisation.
     */
    data: XOR<CotisationUpdateInput, CotisationUncheckedUpdateInput>
    /**
     * Choose, which Cotisation to update.
     */
    where: CotisationWhereUniqueInput
  }

  /**
   * Cotisation updateMany
   */
  export type CotisationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cotisations.
     */
    data: XOR<CotisationUpdateManyMutationInput, CotisationUncheckedUpdateManyInput>
    /**
     * Filter which Cotisations to update
     */
    where?: CotisationWhereInput
  }

  /**
   * Cotisation upsert
   */
  export type CotisationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotisation
     */
    select?: CotisationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotisationInclude<ExtArgs> | null
    /**
     * The filter to search for the Cotisation to update in case it exists.
     */
    where: CotisationWhereUniqueInput
    /**
     * In case the Cotisation found by the `where` argument doesn't exist, create a new Cotisation with this data.
     */
    create: XOR<CotisationCreateInput, CotisationUncheckedCreateInput>
    /**
     * In case the Cotisation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CotisationUpdateInput, CotisationUncheckedUpdateInput>
  }

  /**
   * Cotisation delete
   */
  export type CotisationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotisation
     */
    select?: CotisationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotisationInclude<ExtArgs> | null
    /**
     * Filter which Cotisation to delete.
     */
    where: CotisationWhereUniqueInput
  }

  /**
   * Cotisation deleteMany
   */
  export type CotisationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cotisations to delete
     */
    where?: CotisationWhereInput
  }

  /**
   * Cotisation without action
   */
  export type CotisationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cotisation
     */
    select?: CotisationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CotisationInclude<ExtArgs> | null
  }


  /**
   * Model CaisseSociale
   */

  export type AggregateCaisseSociale = {
    _count: CaisseSocialeCountAggregateOutputType | null
    _avg: CaisseSocialeAvgAggregateOutputType | null
    _sum: CaisseSocialeSumAggregateOutputType | null
    _min: CaisseSocialeMinAggregateOutputType | null
    _max: CaisseSocialeMaxAggregateOutputType | null
  }

  export type CaisseSocialeAvgAggregateOutputType = {
    id: number | null
    soldeActuel: number | null
  }

  export type CaisseSocialeSumAggregateOutputType = {
    id: number | null
    soldeActuel: number | null
  }

  export type CaisseSocialeMinAggregateOutputType = {
    id: number | null
    soldeActuel: number | null
  }

  export type CaisseSocialeMaxAggregateOutputType = {
    id: number | null
    soldeActuel: number | null
  }

  export type CaisseSocialeCountAggregateOutputType = {
    id: number
    soldeActuel: number
    _all: number
  }


  export type CaisseSocialeAvgAggregateInputType = {
    id?: true
    soldeActuel?: true
  }

  export type CaisseSocialeSumAggregateInputType = {
    id?: true
    soldeActuel?: true
  }

  export type CaisseSocialeMinAggregateInputType = {
    id?: true
    soldeActuel?: true
  }

  export type CaisseSocialeMaxAggregateInputType = {
    id?: true
    soldeActuel?: true
  }

  export type CaisseSocialeCountAggregateInputType = {
    id?: true
    soldeActuel?: true
    _all?: true
  }

  export type CaisseSocialeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaisseSociale to aggregate.
     */
    where?: CaisseSocialeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaisseSociales to fetch.
     */
    orderBy?: CaisseSocialeOrderByWithRelationInput | CaisseSocialeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaisseSocialeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaisseSociales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaisseSociales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaisseSociales
    **/
    _count?: true | CaisseSocialeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaisseSocialeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaisseSocialeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaisseSocialeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaisseSocialeMaxAggregateInputType
  }

  export type GetCaisseSocialeAggregateType<T extends CaisseSocialeAggregateArgs> = {
        [P in keyof T & keyof AggregateCaisseSociale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaisseSociale[P]>
      : GetScalarType<T[P], AggregateCaisseSociale[P]>
  }




  export type CaisseSocialeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaisseSocialeWhereInput
    orderBy?: CaisseSocialeOrderByWithAggregationInput | CaisseSocialeOrderByWithAggregationInput[]
    by: CaisseSocialeScalarFieldEnum[] | CaisseSocialeScalarFieldEnum
    having?: CaisseSocialeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaisseSocialeCountAggregateInputType | true
    _avg?: CaisseSocialeAvgAggregateInputType
    _sum?: CaisseSocialeSumAggregateInputType
    _min?: CaisseSocialeMinAggregateInputType
    _max?: CaisseSocialeMaxAggregateInputType
  }

  export type CaisseSocialeGroupByOutputType = {
    id: number
    soldeActuel: number
    _count: CaisseSocialeCountAggregateOutputType | null
    _avg: CaisseSocialeAvgAggregateOutputType | null
    _sum: CaisseSocialeSumAggregateOutputType | null
    _min: CaisseSocialeMinAggregateOutputType | null
    _max: CaisseSocialeMaxAggregateOutputType | null
  }

  type GetCaisseSocialeGroupByPayload<T extends CaisseSocialeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaisseSocialeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaisseSocialeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaisseSocialeGroupByOutputType[P]>
            : GetScalarType<T[P], CaisseSocialeGroupByOutputType[P]>
        }
      >
    >


  export type CaisseSocialeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    soldeActuel?: boolean
    entrees?: boolean | CaisseSociale$entreesArgs<ExtArgs>
    sorties?: boolean | CaisseSociale$sortiesArgs<ExtArgs>
    _count?: boolean | CaisseSocialeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caisseSociale"]>


  export type CaisseSocialeSelectScalar = {
    id?: boolean
    soldeActuel?: boolean
  }

  export type CaisseSocialeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entrees?: boolean | CaisseSociale$entreesArgs<ExtArgs>
    sorties?: boolean | CaisseSociale$sortiesArgs<ExtArgs>
    _count?: boolean | CaisseSocialeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CaisseSocialePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaisseSociale"
    objects: {
      entrees: Prisma.$SoldeEntreePayload<ExtArgs>[]
      sorties: Prisma.$SoldeSortiePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      soldeActuel: number
    }, ExtArgs["result"]["caisseSociale"]>
    composites: {}
  }

  type CaisseSocialeGetPayload<S extends boolean | null | undefined | CaisseSocialeDefaultArgs> = $Result.GetResult<Prisma.$CaisseSocialePayload, S>

  type CaisseSocialeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CaisseSocialeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CaisseSocialeCountAggregateInputType | true
    }

  export interface CaisseSocialeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaisseSociale'], meta: { name: 'CaisseSociale' } }
    /**
     * Find zero or one CaisseSociale that matches the filter.
     * @param {CaisseSocialeFindUniqueArgs} args - Arguments to find a CaisseSociale
     * @example
     * // Get one CaisseSociale
     * const caisseSociale = await prisma.caisseSociale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaisseSocialeFindUniqueArgs>(args: SelectSubset<T, CaisseSocialeFindUniqueArgs<ExtArgs>>): Prisma__CaisseSocialeClient<$Result.GetResult<Prisma.$CaisseSocialePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CaisseSociale that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CaisseSocialeFindUniqueOrThrowArgs} args - Arguments to find a CaisseSociale
     * @example
     * // Get one CaisseSociale
     * const caisseSociale = await prisma.caisseSociale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaisseSocialeFindUniqueOrThrowArgs>(args: SelectSubset<T, CaisseSocialeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaisseSocialeClient<$Result.GetResult<Prisma.$CaisseSocialePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CaisseSociale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaisseSocialeFindFirstArgs} args - Arguments to find a CaisseSociale
     * @example
     * // Get one CaisseSociale
     * const caisseSociale = await prisma.caisseSociale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaisseSocialeFindFirstArgs>(args?: SelectSubset<T, CaisseSocialeFindFirstArgs<ExtArgs>>): Prisma__CaisseSocialeClient<$Result.GetResult<Prisma.$CaisseSocialePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CaisseSociale that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaisseSocialeFindFirstOrThrowArgs} args - Arguments to find a CaisseSociale
     * @example
     * // Get one CaisseSociale
     * const caisseSociale = await prisma.caisseSociale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaisseSocialeFindFirstOrThrowArgs>(args?: SelectSubset<T, CaisseSocialeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaisseSocialeClient<$Result.GetResult<Prisma.$CaisseSocialePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CaisseSociales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaisseSocialeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaisseSociales
     * const caisseSociales = await prisma.caisseSociale.findMany()
     * 
     * // Get first 10 CaisseSociales
     * const caisseSociales = await prisma.caisseSociale.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caisseSocialeWithIdOnly = await prisma.caisseSociale.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaisseSocialeFindManyArgs>(args?: SelectSubset<T, CaisseSocialeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaisseSocialePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CaisseSociale.
     * @param {CaisseSocialeCreateArgs} args - Arguments to create a CaisseSociale.
     * @example
     * // Create one CaisseSociale
     * const CaisseSociale = await prisma.caisseSociale.create({
     *   data: {
     *     // ... data to create a CaisseSociale
     *   }
     * })
     * 
     */
    create<T extends CaisseSocialeCreateArgs>(args: SelectSubset<T, CaisseSocialeCreateArgs<ExtArgs>>): Prisma__CaisseSocialeClient<$Result.GetResult<Prisma.$CaisseSocialePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CaisseSociales.
     * @param {CaisseSocialeCreateManyArgs} args - Arguments to create many CaisseSociales.
     * @example
     * // Create many CaisseSociales
     * const caisseSociale = await prisma.caisseSociale.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaisseSocialeCreateManyArgs>(args?: SelectSubset<T, CaisseSocialeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CaisseSociale.
     * @param {CaisseSocialeDeleteArgs} args - Arguments to delete one CaisseSociale.
     * @example
     * // Delete one CaisseSociale
     * const CaisseSociale = await prisma.caisseSociale.delete({
     *   where: {
     *     // ... filter to delete one CaisseSociale
     *   }
     * })
     * 
     */
    delete<T extends CaisseSocialeDeleteArgs>(args: SelectSubset<T, CaisseSocialeDeleteArgs<ExtArgs>>): Prisma__CaisseSocialeClient<$Result.GetResult<Prisma.$CaisseSocialePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CaisseSociale.
     * @param {CaisseSocialeUpdateArgs} args - Arguments to update one CaisseSociale.
     * @example
     * // Update one CaisseSociale
     * const caisseSociale = await prisma.caisseSociale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaisseSocialeUpdateArgs>(args: SelectSubset<T, CaisseSocialeUpdateArgs<ExtArgs>>): Prisma__CaisseSocialeClient<$Result.GetResult<Prisma.$CaisseSocialePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CaisseSociales.
     * @param {CaisseSocialeDeleteManyArgs} args - Arguments to filter CaisseSociales to delete.
     * @example
     * // Delete a few CaisseSociales
     * const { count } = await prisma.caisseSociale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaisseSocialeDeleteManyArgs>(args?: SelectSubset<T, CaisseSocialeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaisseSociales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaisseSocialeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaisseSociales
     * const caisseSociale = await prisma.caisseSociale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaisseSocialeUpdateManyArgs>(args: SelectSubset<T, CaisseSocialeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CaisseSociale.
     * @param {CaisseSocialeUpsertArgs} args - Arguments to update or create a CaisseSociale.
     * @example
     * // Update or create a CaisseSociale
     * const caisseSociale = await prisma.caisseSociale.upsert({
     *   create: {
     *     // ... data to create a CaisseSociale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaisseSociale we want to update
     *   }
     * })
     */
    upsert<T extends CaisseSocialeUpsertArgs>(args: SelectSubset<T, CaisseSocialeUpsertArgs<ExtArgs>>): Prisma__CaisseSocialeClient<$Result.GetResult<Prisma.$CaisseSocialePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CaisseSociales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaisseSocialeCountArgs} args - Arguments to filter CaisseSociales to count.
     * @example
     * // Count the number of CaisseSociales
     * const count = await prisma.caisseSociale.count({
     *   where: {
     *     // ... the filter for the CaisseSociales we want to count
     *   }
     * })
    **/
    count<T extends CaisseSocialeCountArgs>(
      args?: Subset<T, CaisseSocialeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaisseSocialeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaisseSociale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaisseSocialeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaisseSocialeAggregateArgs>(args: Subset<T, CaisseSocialeAggregateArgs>): Prisma.PrismaPromise<GetCaisseSocialeAggregateType<T>>

    /**
     * Group by CaisseSociale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaisseSocialeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaisseSocialeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaisseSocialeGroupByArgs['orderBy'] }
        : { orderBy?: CaisseSocialeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaisseSocialeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaisseSocialeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaisseSociale model
   */
  readonly fields: CaisseSocialeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaisseSociale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaisseSocialeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    entrees<T extends CaisseSociale$entreesArgs<ExtArgs> = {}>(args?: Subset<T, CaisseSociale$entreesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoldeEntreePayload<ExtArgs>, T, "findMany"> | Null>
    sorties<T extends CaisseSociale$sortiesArgs<ExtArgs> = {}>(args?: Subset<T, CaisseSociale$sortiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoldeSortiePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaisseSociale model
   */ 
  interface CaisseSocialeFieldRefs {
    readonly id: FieldRef<"CaisseSociale", 'Int'>
    readonly soldeActuel: FieldRef<"CaisseSociale", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * CaisseSociale findUnique
   */
  export type CaisseSocialeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaisseSociale
     */
    select?: CaisseSocialeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaisseSocialeInclude<ExtArgs> | null
    /**
     * Filter, which CaisseSociale to fetch.
     */
    where: CaisseSocialeWhereUniqueInput
  }

  /**
   * CaisseSociale findUniqueOrThrow
   */
  export type CaisseSocialeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaisseSociale
     */
    select?: CaisseSocialeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaisseSocialeInclude<ExtArgs> | null
    /**
     * Filter, which CaisseSociale to fetch.
     */
    where: CaisseSocialeWhereUniqueInput
  }

  /**
   * CaisseSociale findFirst
   */
  export type CaisseSocialeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaisseSociale
     */
    select?: CaisseSocialeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaisseSocialeInclude<ExtArgs> | null
    /**
     * Filter, which CaisseSociale to fetch.
     */
    where?: CaisseSocialeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaisseSociales to fetch.
     */
    orderBy?: CaisseSocialeOrderByWithRelationInput | CaisseSocialeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaisseSociales.
     */
    cursor?: CaisseSocialeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaisseSociales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaisseSociales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaisseSociales.
     */
    distinct?: CaisseSocialeScalarFieldEnum | CaisseSocialeScalarFieldEnum[]
  }

  /**
   * CaisseSociale findFirstOrThrow
   */
  export type CaisseSocialeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaisseSociale
     */
    select?: CaisseSocialeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaisseSocialeInclude<ExtArgs> | null
    /**
     * Filter, which CaisseSociale to fetch.
     */
    where?: CaisseSocialeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaisseSociales to fetch.
     */
    orderBy?: CaisseSocialeOrderByWithRelationInput | CaisseSocialeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaisseSociales.
     */
    cursor?: CaisseSocialeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaisseSociales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaisseSociales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaisseSociales.
     */
    distinct?: CaisseSocialeScalarFieldEnum | CaisseSocialeScalarFieldEnum[]
  }

  /**
   * CaisseSociale findMany
   */
  export type CaisseSocialeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaisseSociale
     */
    select?: CaisseSocialeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaisseSocialeInclude<ExtArgs> | null
    /**
     * Filter, which CaisseSociales to fetch.
     */
    where?: CaisseSocialeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaisseSociales to fetch.
     */
    orderBy?: CaisseSocialeOrderByWithRelationInput | CaisseSocialeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaisseSociales.
     */
    cursor?: CaisseSocialeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaisseSociales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaisseSociales.
     */
    skip?: number
    distinct?: CaisseSocialeScalarFieldEnum | CaisseSocialeScalarFieldEnum[]
  }

  /**
   * CaisseSociale create
   */
  export type CaisseSocialeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaisseSociale
     */
    select?: CaisseSocialeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaisseSocialeInclude<ExtArgs> | null
    /**
     * The data needed to create a CaisseSociale.
     */
    data: XOR<CaisseSocialeCreateInput, CaisseSocialeUncheckedCreateInput>
  }

  /**
   * CaisseSociale createMany
   */
  export type CaisseSocialeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaisseSociales.
     */
    data: CaisseSocialeCreateManyInput | CaisseSocialeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaisseSociale update
   */
  export type CaisseSocialeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaisseSociale
     */
    select?: CaisseSocialeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaisseSocialeInclude<ExtArgs> | null
    /**
     * The data needed to update a CaisseSociale.
     */
    data: XOR<CaisseSocialeUpdateInput, CaisseSocialeUncheckedUpdateInput>
    /**
     * Choose, which CaisseSociale to update.
     */
    where: CaisseSocialeWhereUniqueInput
  }

  /**
   * CaisseSociale updateMany
   */
  export type CaisseSocialeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaisseSociales.
     */
    data: XOR<CaisseSocialeUpdateManyMutationInput, CaisseSocialeUncheckedUpdateManyInput>
    /**
     * Filter which CaisseSociales to update
     */
    where?: CaisseSocialeWhereInput
  }

  /**
   * CaisseSociale upsert
   */
  export type CaisseSocialeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaisseSociale
     */
    select?: CaisseSocialeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaisseSocialeInclude<ExtArgs> | null
    /**
     * The filter to search for the CaisseSociale to update in case it exists.
     */
    where: CaisseSocialeWhereUniqueInput
    /**
     * In case the CaisseSociale found by the `where` argument doesn't exist, create a new CaisseSociale with this data.
     */
    create: XOR<CaisseSocialeCreateInput, CaisseSocialeUncheckedCreateInput>
    /**
     * In case the CaisseSociale was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaisseSocialeUpdateInput, CaisseSocialeUncheckedUpdateInput>
  }

  /**
   * CaisseSociale delete
   */
  export type CaisseSocialeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaisseSociale
     */
    select?: CaisseSocialeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaisseSocialeInclude<ExtArgs> | null
    /**
     * Filter which CaisseSociale to delete.
     */
    where: CaisseSocialeWhereUniqueInput
  }

  /**
   * CaisseSociale deleteMany
   */
  export type CaisseSocialeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaisseSociales to delete
     */
    where?: CaisseSocialeWhereInput
  }

  /**
   * CaisseSociale.entrees
   */
  export type CaisseSociale$entreesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeEntree
     */
    select?: SoldeEntreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeEntreeInclude<ExtArgs> | null
    where?: SoldeEntreeWhereInput
    orderBy?: SoldeEntreeOrderByWithRelationInput | SoldeEntreeOrderByWithRelationInput[]
    cursor?: SoldeEntreeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoldeEntreeScalarFieldEnum | SoldeEntreeScalarFieldEnum[]
  }

  /**
   * CaisseSociale.sorties
   */
  export type CaisseSociale$sortiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeSortie
     */
    select?: SoldeSortieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeSortieInclude<ExtArgs> | null
    where?: SoldeSortieWhereInput
    orderBy?: SoldeSortieOrderByWithRelationInput | SoldeSortieOrderByWithRelationInput[]
    cursor?: SoldeSortieWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoldeSortieScalarFieldEnum | SoldeSortieScalarFieldEnum[]
  }

  /**
   * CaisseSociale without action
   */
  export type CaisseSocialeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaisseSociale
     */
    select?: CaisseSocialeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaisseSocialeInclude<ExtArgs> | null
  }


  /**
   * Model SoldeEntree
   */

  export type AggregateSoldeEntree = {
    _count: SoldeEntreeCountAggregateOutputType | null
    _avg: SoldeEntreeAvgAggregateOutputType | null
    _sum: SoldeEntreeSumAggregateOutputType | null
    _min: SoldeEntreeMinAggregateOutputType | null
    _max: SoldeEntreeMaxAggregateOutputType | null
  }

  export type SoldeEntreeAvgAggregateOutputType = {
    id: number | null
    montant: number | null
    caisseId: number | null
  }

  export type SoldeEntreeSumAggregateOutputType = {
    id: number | null
    montant: number | null
    caisseId: number | null
  }

  export type SoldeEntreeMinAggregateOutputType = {
    id: number | null
    date: Date | null
    montant: number | null
    motif: string | null
    caisseId: number | null
  }

  export type SoldeEntreeMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    montant: number | null
    motif: string | null
    caisseId: number | null
  }

  export type SoldeEntreeCountAggregateOutputType = {
    id: number
    date: number
    montant: number
    motif: number
    caisseId: number
    _all: number
  }


  export type SoldeEntreeAvgAggregateInputType = {
    id?: true
    montant?: true
    caisseId?: true
  }

  export type SoldeEntreeSumAggregateInputType = {
    id?: true
    montant?: true
    caisseId?: true
  }

  export type SoldeEntreeMinAggregateInputType = {
    id?: true
    date?: true
    montant?: true
    motif?: true
    caisseId?: true
  }

  export type SoldeEntreeMaxAggregateInputType = {
    id?: true
    date?: true
    montant?: true
    motif?: true
    caisseId?: true
  }

  export type SoldeEntreeCountAggregateInputType = {
    id?: true
    date?: true
    montant?: true
    motif?: true
    caisseId?: true
    _all?: true
  }

  export type SoldeEntreeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoldeEntree to aggregate.
     */
    where?: SoldeEntreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoldeEntrees to fetch.
     */
    orderBy?: SoldeEntreeOrderByWithRelationInput | SoldeEntreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SoldeEntreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoldeEntrees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoldeEntrees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SoldeEntrees
    **/
    _count?: true | SoldeEntreeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SoldeEntreeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SoldeEntreeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SoldeEntreeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SoldeEntreeMaxAggregateInputType
  }

  export type GetSoldeEntreeAggregateType<T extends SoldeEntreeAggregateArgs> = {
        [P in keyof T & keyof AggregateSoldeEntree]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSoldeEntree[P]>
      : GetScalarType<T[P], AggregateSoldeEntree[P]>
  }




  export type SoldeEntreeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoldeEntreeWhereInput
    orderBy?: SoldeEntreeOrderByWithAggregationInput | SoldeEntreeOrderByWithAggregationInput[]
    by: SoldeEntreeScalarFieldEnum[] | SoldeEntreeScalarFieldEnum
    having?: SoldeEntreeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SoldeEntreeCountAggregateInputType | true
    _avg?: SoldeEntreeAvgAggregateInputType
    _sum?: SoldeEntreeSumAggregateInputType
    _min?: SoldeEntreeMinAggregateInputType
    _max?: SoldeEntreeMaxAggregateInputType
  }

  export type SoldeEntreeGroupByOutputType = {
    id: number
    date: Date
    montant: number
    motif: string
    caisseId: number
    _count: SoldeEntreeCountAggregateOutputType | null
    _avg: SoldeEntreeAvgAggregateOutputType | null
    _sum: SoldeEntreeSumAggregateOutputType | null
    _min: SoldeEntreeMinAggregateOutputType | null
    _max: SoldeEntreeMaxAggregateOutputType | null
  }

  type GetSoldeEntreeGroupByPayload<T extends SoldeEntreeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SoldeEntreeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SoldeEntreeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SoldeEntreeGroupByOutputType[P]>
            : GetScalarType<T[P], SoldeEntreeGroupByOutputType[P]>
        }
      >
    >


  export type SoldeEntreeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    montant?: boolean
    motif?: boolean
    caisseId?: boolean
    caisse?: boolean | CaisseSocialeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["soldeEntree"]>


  export type SoldeEntreeSelectScalar = {
    id?: boolean
    date?: boolean
    montant?: boolean
    motif?: boolean
    caisseId?: boolean
  }

  export type SoldeEntreeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    caisse?: boolean | CaisseSocialeDefaultArgs<ExtArgs>
  }

  export type $SoldeEntreePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SoldeEntree"
    objects: {
      caisse: Prisma.$CaisseSocialePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      montant: number
      motif: string
      caisseId: number
    }, ExtArgs["result"]["soldeEntree"]>
    composites: {}
  }

  type SoldeEntreeGetPayload<S extends boolean | null | undefined | SoldeEntreeDefaultArgs> = $Result.GetResult<Prisma.$SoldeEntreePayload, S>

  type SoldeEntreeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SoldeEntreeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SoldeEntreeCountAggregateInputType | true
    }

  export interface SoldeEntreeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SoldeEntree'], meta: { name: 'SoldeEntree' } }
    /**
     * Find zero or one SoldeEntree that matches the filter.
     * @param {SoldeEntreeFindUniqueArgs} args - Arguments to find a SoldeEntree
     * @example
     * // Get one SoldeEntree
     * const soldeEntree = await prisma.soldeEntree.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SoldeEntreeFindUniqueArgs>(args: SelectSubset<T, SoldeEntreeFindUniqueArgs<ExtArgs>>): Prisma__SoldeEntreeClient<$Result.GetResult<Prisma.$SoldeEntreePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SoldeEntree that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SoldeEntreeFindUniqueOrThrowArgs} args - Arguments to find a SoldeEntree
     * @example
     * // Get one SoldeEntree
     * const soldeEntree = await prisma.soldeEntree.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SoldeEntreeFindUniqueOrThrowArgs>(args: SelectSubset<T, SoldeEntreeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SoldeEntreeClient<$Result.GetResult<Prisma.$SoldeEntreePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SoldeEntree that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeEntreeFindFirstArgs} args - Arguments to find a SoldeEntree
     * @example
     * // Get one SoldeEntree
     * const soldeEntree = await prisma.soldeEntree.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SoldeEntreeFindFirstArgs>(args?: SelectSubset<T, SoldeEntreeFindFirstArgs<ExtArgs>>): Prisma__SoldeEntreeClient<$Result.GetResult<Prisma.$SoldeEntreePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SoldeEntree that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeEntreeFindFirstOrThrowArgs} args - Arguments to find a SoldeEntree
     * @example
     * // Get one SoldeEntree
     * const soldeEntree = await prisma.soldeEntree.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SoldeEntreeFindFirstOrThrowArgs>(args?: SelectSubset<T, SoldeEntreeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SoldeEntreeClient<$Result.GetResult<Prisma.$SoldeEntreePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SoldeEntrees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeEntreeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SoldeEntrees
     * const soldeEntrees = await prisma.soldeEntree.findMany()
     * 
     * // Get first 10 SoldeEntrees
     * const soldeEntrees = await prisma.soldeEntree.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const soldeEntreeWithIdOnly = await prisma.soldeEntree.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SoldeEntreeFindManyArgs>(args?: SelectSubset<T, SoldeEntreeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoldeEntreePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SoldeEntree.
     * @param {SoldeEntreeCreateArgs} args - Arguments to create a SoldeEntree.
     * @example
     * // Create one SoldeEntree
     * const SoldeEntree = await prisma.soldeEntree.create({
     *   data: {
     *     // ... data to create a SoldeEntree
     *   }
     * })
     * 
     */
    create<T extends SoldeEntreeCreateArgs>(args: SelectSubset<T, SoldeEntreeCreateArgs<ExtArgs>>): Prisma__SoldeEntreeClient<$Result.GetResult<Prisma.$SoldeEntreePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SoldeEntrees.
     * @param {SoldeEntreeCreateManyArgs} args - Arguments to create many SoldeEntrees.
     * @example
     * // Create many SoldeEntrees
     * const soldeEntree = await prisma.soldeEntree.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SoldeEntreeCreateManyArgs>(args?: SelectSubset<T, SoldeEntreeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SoldeEntree.
     * @param {SoldeEntreeDeleteArgs} args - Arguments to delete one SoldeEntree.
     * @example
     * // Delete one SoldeEntree
     * const SoldeEntree = await prisma.soldeEntree.delete({
     *   where: {
     *     // ... filter to delete one SoldeEntree
     *   }
     * })
     * 
     */
    delete<T extends SoldeEntreeDeleteArgs>(args: SelectSubset<T, SoldeEntreeDeleteArgs<ExtArgs>>): Prisma__SoldeEntreeClient<$Result.GetResult<Prisma.$SoldeEntreePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SoldeEntree.
     * @param {SoldeEntreeUpdateArgs} args - Arguments to update one SoldeEntree.
     * @example
     * // Update one SoldeEntree
     * const soldeEntree = await prisma.soldeEntree.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SoldeEntreeUpdateArgs>(args: SelectSubset<T, SoldeEntreeUpdateArgs<ExtArgs>>): Prisma__SoldeEntreeClient<$Result.GetResult<Prisma.$SoldeEntreePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SoldeEntrees.
     * @param {SoldeEntreeDeleteManyArgs} args - Arguments to filter SoldeEntrees to delete.
     * @example
     * // Delete a few SoldeEntrees
     * const { count } = await prisma.soldeEntree.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SoldeEntreeDeleteManyArgs>(args?: SelectSubset<T, SoldeEntreeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SoldeEntrees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeEntreeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SoldeEntrees
     * const soldeEntree = await prisma.soldeEntree.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SoldeEntreeUpdateManyArgs>(args: SelectSubset<T, SoldeEntreeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SoldeEntree.
     * @param {SoldeEntreeUpsertArgs} args - Arguments to update or create a SoldeEntree.
     * @example
     * // Update or create a SoldeEntree
     * const soldeEntree = await prisma.soldeEntree.upsert({
     *   create: {
     *     // ... data to create a SoldeEntree
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SoldeEntree we want to update
     *   }
     * })
     */
    upsert<T extends SoldeEntreeUpsertArgs>(args: SelectSubset<T, SoldeEntreeUpsertArgs<ExtArgs>>): Prisma__SoldeEntreeClient<$Result.GetResult<Prisma.$SoldeEntreePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SoldeEntrees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeEntreeCountArgs} args - Arguments to filter SoldeEntrees to count.
     * @example
     * // Count the number of SoldeEntrees
     * const count = await prisma.soldeEntree.count({
     *   where: {
     *     // ... the filter for the SoldeEntrees we want to count
     *   }
     * })
    **/
    count<T extends SoldeEntreeCountArgs>(
      args?: Subset<T, SoldeEntreeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SoldeEntreeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SoldeEntree.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeEntreeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SoldeEntreeAggregateArgs>(args: Subset<T, SoldeEntreeAggregateArgs>): Prisma.PrismaPromise<GetSoldeEntreeAggregateType<T>>

    /**
     * Group by SoldeEntree.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeEntreeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SoldeEntreeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SoldeEntreeGroupByArgs['orderBy'] }
        : { orderBy?: SoldeEntreeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SoldeEntreeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSoldeEntreeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SoldeEntree model
   */
  readonly fields: SoldeEntreeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SoldeEntree.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SoldeEntreeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    caisse<T extends CaisseSocialeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaisseSocialeDefaultArgs<ExtArgs>>): Prisma__CaisseSocialeClient<$Result.GetResult<Prisma.$CaisseSocialePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SoldeEntree model
   */ 
  interface SoldeEntreeFieldRefs {
    readonly id: FieldRef<"SoldeEntree", 'Int'>
    readonly date: FieldRef<"SoldeEntree", 'DateTime'>
    readonly montant: FieldRef<"SoldeEntree", 'Float'>
    readonly motif: FieldRef<"SoldeEntree", 'String'>
    readonly caisseId: FieldRef<"SoldeEntree", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SoldeEntree findUnique
   */
  export type SoldeEntreeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeEntree
     */
    select?: SoldeEntreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeEntreeInclude<ExtArgs> | null
    /**
     * Filter, which SoldeEntree to fetch.
     */
    where: SoldeEntreeWhereUniqueInput
  }

  /**
   * SoldeEntree findUniqueOrThrow
   */
  export type SoldeEntreeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeEntree
     */
    select?: SoldeEntreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeEntreeInclude<ExtArgs> | null
    /**
     * Filter, which SoldeEntree to fetch.
     */
    where: SoldeEntreeWhereUniqueInput
  }

  /**
   * SoldeEntree findFirst
   */
  export type SoldeEntreeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeEntree
     */
    select?: SoldeEntreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeEntreeInclude<ExtArgs> | null
    /**
     * Filter, which SoldeEntree to fetch.
     */
    where?: SoldeEntreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoldeEntrees to fetch.
     */
    orderBy?: SoldeEntreeOrderByWithRelationInput | SoldeEntreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoldeEntrees.
     */
    cursor?: SoldeEntreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoldeEntrees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoldeEntrees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoldeEntrees.
     */
    distinct?: SoldeEntreeScalarFieldEnum | SoldeEntreeScalarFieldEnum[]
  }

  /**
   * SoldeEntree findFirstOrThrow
   */
  export type SoldeEntreeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeEntree
     */
    select?: SoldeEntreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeEntreeInclude<ExtArgs> | null
    /**
     * Filter, which SoldeEntree to fetch.
     */
    where?: SoldeEntreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoldeEntrees to fetch.
     */
    orderBy?: SoldeEntreeOrderByWithRelationInput | SoldeEntreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoldeEntrees.
     */
    cursor?: SoldeEntreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoldeEntrees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoldeEntrees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoldeEntrees.
     */
    distinct?: SoldeEntreeScalarFieldEnum | SoldeEntreeScalarFieldEnum[]
  }

  /**
   * SoldeEntree findMany
   */
  export type SoldeEntreeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeEntree
     */
    select?: SoldeEntreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeEntreeInclude<ExtArgs> | null
    /**
     * Filter, which SoldeEntrees to fetch.
     */
    where?: SoldeEntreeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoldeEntrees to fetch.
     */
    orderBy?: SoldeEntreeOrderByWithRelationInput | SoldeEntreeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SoldeEntrees.
     */
    cursor?: SoldeEntreeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoldeEntrees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoldeEntrees.
     */
    skip?: number
    distinct?: SoldeEntreeScalarFieldEnum | SoldeEntreeScalarFieldEnum[]
  }

  /**
   * SoldeEntree create
   */
  export type SoldeEntreeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeEntree
     */
    select?: SoldeEntreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeEntreeInclude<ExtArgs> | null
    /**
     * The data needed to create a SoldeEntree.
     */
    data: XOR<SoldeEntreeCreateInput, SoldeEntreeUncheckedCreateInput>
  }

  /**
   * SoldeEntree createMany
   */
  export type SoldeEntreeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SoldeEntrees.
     */
    data: SoldeEntreeCreateManyInput | SoldeEntreeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SoldeEntree update
   */
  export type SoldeEntreeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeEntree
     */
    select?: SoldeEntreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeEntreeInclude<ExtArgs> | null
    /**
     * The data needed to update a SoldeEntree.
     */
    data: XOR<SoldeEntreeUpdateInput, SoldeEntreeUncheckedUpdateInput>
    /**
     * Choose, which SoldeEntree to update.
     */
    where: SoldeEntreeWhereUniqueInput
  }

  /**
   * SoldeEntree updateMany
   */
  export type SoldeEntreeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SoldeEntrees.
     */
    data: XOR<SoldeEntreeUpdateManyMutationInput, SoldeEntreeUncheckedUpdateManyInput>
    /**
     * Filter which SoldeEntrees to update
     */
    where?: SoldeEntreeWhereInput
  }

  /**
   * SoldeEntree upsert
   */
  export type SoldeEntreeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeEntree
     */
    select?: SoldeEntreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeEntreeInclude<ExtArgs> | null
    /**
     * The filter to search for the SoldeEntree to update in case it exists.
     */
    where: SoldeEntreeWhereUniqueInput
    /**
     * In case the SoldeEntree found by the `where` argument doesn't exist, create a new SoldeEntree with this data.
     */
    create: XOR<SoldeEntreeCreateInput, SoldeEntreeUncheckedCreateInput>
    /**
     * In case the SoldeEntree was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SoldeEntreeUpdateInput, SoldeEntreeUncheckedUpdateInput>
  }

  /**
   * SoldeEntree delete
   */
  export type SoldeEntreeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeEntree
     */
    select?: SoldeEntreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeEntreeInclude<ExtArgs> | null
    /**
     * Filter which SoldeEntree to delete.
     */
    where: SoldeEntreeWhereUniqueInput
  }

  /**
   * SoldeEntree deleteMany
   */
  export type SoldeEntreeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoldeEntrees to delete
     */
    where?: SoldeEntreeWhereInput
  }

  /**
   * SoldeEntree without action
   */
  export type SoldeEntreeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeEntree
     */
    select?: SoldeEntreeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeEntreeInclude<ExtArgs> | null
  }


  /**
   * Model SoldeSortie
   */

  export type AggregateSoldeSortie = {
    _count: SoldeSortieCountAggregateOutputType | null
    _avg: SoldeSortieAvgAggregateOutputType | null
    _sum: SoldeSortieSumAggregateOutputType | null
    _min: SoldeSortieMinAggregateOutputType | null
    _max: SoldeSortieMaxAggregateOutputType | null
  }

  export type SoldeSortieAvgAggregateOutputType = {
    id: number | null
    montant: number | null
    caisseId: number | null
  }

  export type SoldeSortieSumAggregateOutputType = {
    id: number | null
    montant: number | null
    caisseId: number | null
  }

  export type SoldeSortieMinAggregateOutputType = {
    id: number | null
    date: Date | null
    montant: number | null
    motif: string | null
    caisseId: number | null
  }

  export type SoldeSortieMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    montant: number | null
    motif: string | null
    caisseId: number | null
  }

  export type SoldeSortieCountAggregateOutputType = {
    id: number
    date: number
    montant: number
    motif: number
    caisseId: number
    _all: number
  }


  export type SoldeSortieAvgAggregateInputType = {
    id?: true
    montant?: true
    caisseId?: true
  }

  export type SoldeSortieSumAggregateInputType = {
    id?: true
    montant?: true
    caisseId?: true
  }

  export type SoldeSortieMinAggregateInputType = {
    id?: true
    date?: true
    montant?: true
    motif?: true
    caisseId?: true
  }

  export type SoldeSortieMaxAggregateInputType = {
    id?: true
    date?: true
    montant?: true
    motif?: true
    caisseId?: true
  }

  export type SoldeSortieCountAggregateInputType = {
    id?: true
    date?: true
    montant?: true
    motif?: true
    caisseId?: true
    _all?: true
  }

  export type SoldeSortieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoldeSortie to aggregate.
     */
    where?: SoldeSortieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoldeSorties to fetch.
     */
    orderBy?: SoldeSortieOrderByWithRelationInput | SoldeSortieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SoldeSortieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoldeSorties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoldeSorties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SoldeSorties
    **/
    _count?: true | SoldeSortieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SoldeSortieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SoldeSortieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SoldeSortieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SoldeSortieMaxAggregateInputType
  }

  export type GetSoldeSortieAggregateType<T extends SoldeSortieAggregateArgs> = {
        [P in keyof T & keyof AggregateSoldeSortie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSoldeSortie[P]>
      : GetScalarType<T[P], AggregateSoldeSortie[P]>
  }




  export type SoldeSortieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoldeSortieWhereInput
    orderBy?: SoldeSortieOrderByWithAggregationInput | SoldeSortieOrderByWithAggregationInput[]
    by: SoldeSortieScalarFieldEnum[] | SoldeSortieScalarFieldEnum
    having?: SoldeSortieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SoldeSortieCountAggregateInputType | true
    _avg?: SoldeSortieAvgAggregateInputType
    _sum?: SoldeSortieSumAggregateInputType
    _min?: SoldeSortieMinAggregateInputType
    _max?: SoldeSortieMaxAggregateInputType
  }

  export type SoldeSortieGroupByOutputType = {
    id: number
    date: Date
    montant: number
    motif: string
    caisseId: number
    _count: SoldeSortieCountAggregateOutputType | null
    _avg: SoldeSortieAvgAggregateOutputType | null
    _sum: SoldeSortieSumAggregateOutputType | null
    _min: SoldeSortieMinAggregateOutputType | null
    _max: SoldeSortieMaxAggregateOutputType | null
  }

  type GetSoldeSortieGroupByPayload<T extends SoldeSortieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SoldeSortieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SoldeSortieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SoldeSortieGroupByOutputType[P]>
            : GetScalarType<T[P], SoldeSortieGroupByOutputType[P]>
        }
      >
    >


  export type SoldeSortieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    montant?: boolean
    motif?: boolean
    caisseId?: boolean
    caisse?: boolean | CaisseSocialeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["soldeSortie"]>


  export type SoldeSortieSelectScalar = {
    id?: boolean
    date?: boolean
    montant?: boolean
    motif?: boolean
    caisseId?: boolean
  }

  export type SoldeSortieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    caisse?: boolean | CaisseSocialeDefaultArgs<ExtArgs>
  }

  export type $SoldeSortiePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SoldeSortie"
    objects: {
      caisse: Prisma.$CaisseSocialePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      montant: number
      motif: string
      caisseId: number
    }, ExtArgs["result"]["soldeSortie"]>
    composites: {}
  }

  type SoldeSortieGetPayload<S extends boolean | null | undefined | SoldeSortieDefaultArgs> = $Result.GetResult<Prisma.$SoldeSortiePayload, S>

  type SoldeSortieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SoldeSortieFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SoldeSortieCountAggregateInputType | true
    }

  export interface SoldeSortieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SoldeSortie'], meta: { name: 'SoldeSortie' } }
    /**
     * Find zero or one SoldeSortie that matches the filter.
     * @param {SoldeSortieFindUniqueArgs} args - Arguments to find a SoldeSortie
     * @example
     * // Get one SoldeSortie
     * const soldeSortie = await prisma.soldeSortie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SoldeSortieFindUniqueArgs>(args: SelectSubset<T, SoldeSortieFindUniqueArgs<ExtArgs>>): Prisma__SoldeSortieClient<$Result.GetResult<Prisma.$SoldeSortiePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SoldeSortie that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SoldeSortieFindUniqueOrThrowArgs} args - Arguments to find a SoldeSortie
     * @example
     * // Get one SoldeSortie
     * const soldeSortie = await prisma.soldeSortie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SoldeSortieFindUniqueOrThrowArgs>(args: SelectSubset<T, SoldeSortieFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SoldeSortieClient<$Result.GetResult<Prisma.$SoldeSortiePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SoldeSortie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeSortieFindFirstArgs} args - Arguments to find a SoldeSortie
     * @example
     * // Get one SoldeSortie
     * const soldeSortie = await prisma.soldeSortie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SoldeSortieFindFirstArgs>(args?: SelectSubset<T, SoldeSortieFindFirstArgs<ExtArgs>>): Prisma__SoldeSortieClient<$Result.GetResult<Prisma.$SoldeSortiePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SoldeSortie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeSortieFindFirstOrThrowArgs} args - Arguments to find a SoldeSortie
     * @example
     * // Get one SoldeSortie
     * const soldeSortie = await prisma.soldeSortie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SoldeSortieFindFirstOrThrowArgs>(args?: SelectSubset<T, SoldeSortieFindFirstOrThrowArgs<ExtArgs>>): Prisma__SoldeSortieClient<$Result.GetResult<Prisma.$SoldeSortiePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SoldeSorties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeSortieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SoldeSorties
     * const soldeSorties = await prisma.soldeSortie.findMany()
     * 
     * // Get first 10 SoldeSorties
     * const soldeSorties = await prisma.soldeSortie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const soldeSortieWithIdOnly = await prisma.soldeSortie.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SoldeSortieFindManyArgs>(args?: SelectSubset<T, SoldeSortieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoldeSortiePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SoldeSortie.
     * @param {SoldeSortieCreateArgs} args - Arguments to create a SoldeSortie.
     * @example
     * // Create one SoldeSortie
     * const SoldeSortie = await prisma.soldeSortie.create({
     *   data: {
     *     // ... data to create a SoldeSortie
     *   }
     * })
     * 
     */
    create<T extends SoldeSortieCreateArgs>(args: SelectSubset<T, SoldeSortieCreateArgs<ExtArgs>>): Prisma__SoldeSortieClient<$Result.GetResult<Prisma.$SoldeSortiePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SoldeSorties.
     * @param {SoldeSortieCreateManyArgs} args - Arguments to create many SoldeSorties.
     * @example
     * // Create many SoldeSorties
     * const soldeSortie = await prisma.soldeSortie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SoldeSortieCreateManyArgs>(args?: SelectSubset<T, SoldeSortieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SoldeSortie.
     * @param {SoldeSortieDeleteArgs} args - Arguments to delete one SoldeSortie.
     * @example
     * // Delete one SoldeSortie
     * const SoldeSortie = await prisma.soldeSortie.delete({
     *   where: {
     *     // ... filter to delete one SoldeSortie
     *   }
     * })
     * 
     */
    delete<T extends SoldeSortieDeleteArgs>(args: SelectSubset<T, SoldeSortieDeleteArgs<ExtArgs>>): Prisma__SoldeSortieClient<$Result.GetResult<Prisma.$SoldeSortiePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SoldeSortie.
     * @param {SoldeSortieUpdateArgs} args - Arguments to update one SoldeSortie.
     * @example
     * // Update one SoldeSortie
     * const soldeSortie = await prisma.soldeSortie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SoldeSortieUpdateArgs>(args: SelectSubset<T, SoldeSortieUpdateArgs<ExtArgs>>): Prisma__SoldeSortieClient<$Result.GetResult<Prisma.$SoldeSortiePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SoldeSorties.
     * @param {SoldeSortieDeleteManyArgs} args - Arguments to filter SoldeSorties to delete.
     * @example
     * // Delete a few SoldeSorties
     * const { count } = await prisma.soldeSortie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SoldeSortieDeleteManyArgs>(args?: SelectSubset<T, SoldeSortieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SoldeSorties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeSortieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SoldeSorties
     * const soldeSortie = await prisma.soldeSortie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SoldeSortieUpdateManyArgs>(args: SelectSubset<T, SoldeSortieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SoldeSortie.
     * @param {SoldeSortieUpsertArgs} args - Arguments to update or create a SoldeSortie.
     * @example
     * // Update or create a SoldeSortie
     * const soldeSortie = await prisma.soldeSortie.upsert({
     *   create: {
     *     // ... data to create a SoldeSortie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SoldeSortie we want to update
     *   }
     * })
     */
    upsert<T extends SoldeSortieUpsertArgs>(args: SelectSubset<T, SoldeSortieUpsertArgs<ExtArgs>>): Prisma__SoldeSortieClient<$Result.GetResult<Prisma.$SoldeSortiePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SoldeSorties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeSortieCountArgs} args - Arguments to filter SoldeSorties to count.
     * @example
     * // Count the number of SoldeSorties
     * const count = await prisma.soldeSortie.count({
     *   where: {
     *     // ... the filter for the SoldeSorties we want to count
     *   }
     * })
    **/
    count<T extends SoldeSortieCountArgs>(
      args?: Subset<T, SoldeSortieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SoldeSortieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SoldeSortie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeSortieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SoldeSortieAggregateArgs>(args: Subset<T, SoldeSortieAggregateArgs>): Prisma.PrismaPromise<GetSoldeSortieAggregateType<T>>

    /**
     * Group by SoldeSortie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoldeSortieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SoldeSortieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SoldeSortieGroupByArgs['orderBy'] }
        : { orderBy?: SoldeSortieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SoldeSortieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSoldeSortieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SoldeSortie model
   */
  readonly fields: SoldeSortieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SoldeSortie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SoldeSortieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    caisse<T extends CaisseSocialeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CaisseSocialeDefaultArgs<ExtArgs>>): Prisma__CaisseSocialeClient<$Result.GetResult<Prisma.$CaisseSocialePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SoldeSortie model
   */ 
  interface SoldeSortieFieldRefs {
    readonly id: FieldRef<"SoldeSortie", 'Int'>
    readonly date: FieldRef<"SoldeSortie", 'DateTime'>
    readonly montant: FieldRef<"SoldeSortie", 'Float'>
    readonly motif: FieldRef<"SoldeSortie", 'String'>
    readonly caisseId: FieldRef<"SoldeSortie", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SoldeSortie findUnique
   */
  export type SoldeSortieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeSortie
     */
    select?: SoldeSortieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeSortieInclude<ExtArgs> | null
    /**
     * Filter, which SoldeSortie to fetch.
     */
    where: SoldeSortieWhereUniqueInput
  }

  /**
   * SoldeSortie findUniqueOrThrow
   */
  export type SoldeSortieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeSortie
     */
    select?: SoldeSortieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeSortieInclude<ExtArgs> | null
    /**
     * Filter, which SoldeSortie to fetch.
     */
    where: SoldeSortieWhereUniqueInput
  }

  /**
   * SoldeSortie findFirst
   */
  export type SoldeSortieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeSortie
     */
    select?: SoldeSortieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeSortieInclude<ExtArgs> | null
    /**
     * Filter, which SoldeSortie to fetch.
     */
    where?: SoldeSortieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoldeSorties to fetch.
     */
    orderBy?: SoldeSortieOrderByWithRelationInput | SoldeSortieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoldeSorties.
     */
    cursor?: SoldeSortieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoldeSorties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoldeSorties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoldeSorties.
     */
    distinct?: SoldeSortieScalarFieldEnum | SoldeSortieScalarFieldEnum[]
  }

  /**
   * SoldeSortie findFirstOrThrow
   */
  export type SoldeSortieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeSortie
     */
    select?: SoldeSortieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeSortieInclude<ExtArgs> | null
    /**
     * Filter, which SoldeSortie to fetch.
     */
    where?: SoldeSortieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoldeSorties to fetch.
     */
    orderBy?: SoldeSortieOrderByWithRelationInput | SoldeSortieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoldeSorties.
     */
    cursor?: SoldeSortieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoldeSorties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoldeSorties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoldeSorties.
     */
    distinct?: SoldeSortieScalarFieldEnum | SoldeSortieScalarFieldEnum[]
  }

  /**
   * SoldeSortie findMany
   */
  export type SoldeSortieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeSortie
     */
    select?: SoldeSortieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeSortieInclude<ExtArgs> | null
    /**
     * Filter, which SoldeSorties to fetch.
     */
    where?: SoldeSortieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoldeSorties to fetch.
     */
    orderBy?: SoldeSortieOrderByWithRelationInput | SoldeSortieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SoldeSorties.
     */
    cursor?: SoldeSortieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoldeSorties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoldeSorties.
     */
    skip?: number
    distinct?: SoldeSortieScalarFieldEnum | SoldeSortieScalarFieldEnum[]
  }

  /**
   * SoldeSortie create
   */
  export type SoldeSortieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeSortie
     */
    select?: SoldeSortieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeSortieInclude<ExtArgs> | null
    /**
     * The data needed to create a SoldeSortie.
     */
    data: XOR<SoldeSortieCreateInput, SoldeSortieUncheckedCreateInput>
  }

  /**
   * SoldeSortie createMany
   */
  export type SoldeSortieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SoldeSorties.
     */
    data: SoldeSortieCreateManyInput | SoldeSortieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SoldeSortie update
   */
  export type SoldeSortieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeSortie
     */
    select?: SoldeSortieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeSortieInclude<ExtArgs> | null
    /**
     * The data needed to update a SoldeSortie.
     */
    data: XOR<SoldeSortieUpdateInput, SoldeSortieUncheckedUpdateInput>
    /**
     * Choose, which SoldeSortie to update.
     */
    where: SoldeSortieWhereUniqueInput
  }

  /**
   * SoldeSortie updateMany
   */
  export type SoldeSortieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SoldeSorties.
     */
    data: XOR<SoldeSortieUpdateManyMutationInput, SoldeSortieUncheckedUpdateManyInput>
    /**
     * Filter which SoldeSorties to update
     */
    where?: SoldeSortieWhereInput
  }

  /**
   * SoldeSortie upsert
   */
  export type SoldeSortieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeSortie
     */
    select?: SoldeSortieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeSortieInclude<ExtArgs> | null
    /**
     * The filter to search for the SoldeSortie to update in case it exists.
     */
    where: SoldeSortieWhereUniqueInput
    /**
     * In case the SoldeSortie found by the `where` argument doesn't exist, create a new SoldeSortie with this data.
     */
    create: XOR<SoldeSortieCreateInput, SoldeSortieUncheckedCreateInput>
    /**
     * In case the SoldeSortie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SoldeSortieUpdateInput, SoldeSortieUncheckedUpdateInput>
  }

  /**
   * SoldeSortie delete
   */
  export type SoldeSortieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeSortie
     */
    select?: SoldeSortieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeSortieInclude<ExtArgs> | null
    /**
     * Filter which SoldeSortie to delete.
     */
    where: SoldeSortieWhereUniqueInput
  }

  /**
   * SoldeSortie deleteMany
   */
  export type SoldeSortieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoldeSorties to delete
     */
    where?: SoldeSortieWhereInput
  }

  /**
   * SoldeSortie without action
   */
  export type SoldeSortieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoldeSortie
     */
    select?: SoldeSortieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoldeSortieInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MembreScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    poste: 'poste',
    email: 'email'
  };

  export type MembreScalarFieldEnum = (typeof MembreScalarFieldEnum)[keyof typeof MembreScalarFieldEnum]


  export const MissionScalarFieldEnum: {
    id: 'id',
    membreId: 'membreId',
    montant: 'montant',
    mois: 'mois'
  };

  export type MissionScalarFieldEnum = (typeof MissionScalarFieldEnum)[keyof typeof MissionScalarFieldEnum]


  export const PaiementMissionScalarFieldEnum: {
    id: 'id',
    datePaiement: 'datePaiement',
    membreId: 'membreId',
    missionId: 'missionId',
    montant: 'montant',
    restePayer: 'restePayer'
  };

  export type PaiementMissionScalarFieldEnum = (typeof PaiementMissionScalarFieldEnum)[keyof typeof PaiementMissionScalarFieldEnum]


  export const CotisationScalarFieldEnum: {
    id: 'id',
    membreId: 'membreId',
    datePaiement: 'datePaiement',
    montant: 'montant',
    mois: 'mois',
    status: 'status'
  };

  export type CotisationScalarFieldEnum = (typeof CotisationScalarFieldEnum)[keyof typeof CotisationScalarFieldEnum]


  export const CaisseSocialeScalarFieldEnum: {
    id: 'id',
    soldeActuel: 'soldeActuel'
  };

  export type CaisseSocialeScalarFieldEnum = (typeof CaisseSocialeScalarFieldEnum)[keyof typeof CaisseSocialeScalarFieldEnum]


  export const SoldeEntreeScalarFieldEnum: {
    id: 'id',
    date: 'date',
    montant: 'montant',
    motif: 'motif',
    caisseId: 'caisseId'
  };

  export type SoldeEntreeScalarFieldEnum = (typeof SoldeEntreeScalarFieldEnum)[keyof typeof SoldeEntreeScalarFieldEnum]


  export const SoldeSortieScalarFieldEnum: {
    id: 'id',
    date: 'date',
    montant: 'montant',
    motif: 'motif',
    caisseId: 'caisseId'
  };

  export type SoldeSortieScalarFieldEnum = (typeof SoldeSortieScalarFieldEnum)[keyof typeof SoldeSortieScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type MembreWhereInput = {
    AND?: MembreWhereInput | MembreWhereInput[]
    OR?: MembreWhereInput[]
    NOT?: MembreWhereInput | MembreWhereInput[]
    id?: IntFilter<"Membre"> | number
    nom?: StringFilter<"Membre"> | string
    poste?: StringFilter<"Membre"> | string
    email?: StringFilter<"Membre"> | string
    cotisations?: CotisationListRelationFilter
    missions?: MissionListRelationFilter
    paiementsMission?: PaiementMissionListRelationFilter
  }

  export type MembreOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    poste?: SortOrder
    email?: SortOrder
    cotisations?: CotisationOrderByRelationAggregateInput
    missions?: MissionOrderByRelationAggregateInput
    paiementsMission?: PaiementMissionOrderByRelationAggregateInput
  }

  export type MembreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: MembreWhereInput | MembreWhereInput[]
    OR?: MembreWhereInput[]
    NOT?: MembreWhereInput | MembreWhereInput[]
    nom?: StringFilter<"Membre"> | string
    poste?: StringFilter<"Membre"> | string
    cotisations?: CotisationListRelationFilter
    missions?: MissionListRelationFilter
    paiementsMission?: PaiementMissionListRelationFilter
  }, "id" | "email">

  export type MembreOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    poste?: SortOrder
    email?: SortOrder
    _count?: MembreCountOrderByAggregateInput
    _avg?: MembreAvgOrderByAggregateInput
    _max?: MembreMaxOrderByAggregateInput
    _min?: MembreMinOrderByAggregateInput
    _sum?: MembreSumOrderByAggregateInput
  }

  export type MembreScalarWhereWithAggregatesInput = {
    AND?: MembreScalarWhereWithAggregatesInput | MembreScalarWhereWithAggregatesInput[]
    OR?: MembreScalarWhereWithAggregatesInput[]
    NOT?: MembreScalarWhereWithAggregatesInput | MembreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Membre"> | number
    nom?: StringWithAggregatesFilter<"Membre"> | string
    poste?: StringWithAggregatesFilter<"Membre"> | string
    email?: StringWithAggregatesFilter<"Membre"> | string
  }

  export type MissionWhereInput = {
    AND?: MissionWhereInput | MissionWhereInput[]
    OR?: MissionWhereInput[]
    NOT?: MissionWhereInput | MissionWhereInput[]
    id?: IntFilter<"Mission"> | number
    membreId?: IntFilter<"Mission"> | number
    montant?: FloatFilter<"Mission"> | number
    mois?: DateTimeFilter<"Mission"> | Date | string
    membre?: XOR<MembreRelationFilter, MembreWhereInput>
    paiements?: PaiementMissionListRelationFilter
  }

  export type MissionOrderByWithRelationInput = {
    id?: SortOrder
    membreId?: SortOrder
    montant?: SortOrder
    mois?: SortOrder
    membre?: MembreOrderByWithRelationInput
    paiements?: PaiementMissionOrderByRelationAggregateInput
  }

  export type MissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MissionWhereInput | MissionWhereInput[]
    OR?: MissionWhereInput[]
    NOT?: MissionWhereInput | MissionWhereInput[]
    membreId?: IntFilter<"Mission"> | number
    montant?: FloatFilter<"Mission"> | number
    mois?: DateTimeFilter<"Mission"> | Date | string
    membre?: XOR<MembreRelationFilter, MembreWhereInput>
    paiements?: PaiementMissionListRelationFilter
  }, "id">

  export type MissionOrderByWithAggregationInput = {
    id?: SortOrder
    membreId?: SortOrder
    montant?: SortOrder
    mois?: SortOrder
    _count?: MissionCountOrderByAggregateInput
    _avg?: MissionAvgOrderByAggregateInput
    _max?: MissionMaxOrderByAggregateInput
    _min?: MissionMinOrderByAggregateInput
    _sum?: MissionSumOrderByAggregateInput
  }

  export type MissionScalarWhereWithAggregatesInput = {
    AND?: MissionScalarWhereWithAggregatesInput | MissionScalarWhereWithAggregatesInput[]
    OR?: MissionScalarWhereWithAggregatesInput[]
    NOT?: MissionScalarWhereWithAggregatesInput | MissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Mission"> | number
    membreId?: IntWithAggregatesFilter<"Mission"> | number
    montant?: FloatWithAggregatesFilter<"Mission"> | number
    mois?: DateTimeWithAggregatesFilter<"Mission"> | Date | string
  }

  export type PaiementMissionWhereInput = {
    AND?: PaiementMissionWhereInput | PaiementMissionWhereInput[]
    OR?: PaiementMissionWhereInput[]
    NOT?: PaiementMissionWhereInput | PaiementMissionWhereInput[]
    id?: IntFilter<"PaiementMission"> | number
    datePaiement?: DateTimeFilter<"PaiementMission"> | Date | string
    membreId?: IntFilter<"PaiementMission"> | number
    missionId?: IntFilter<"PaiementMission"> | number
    montant?: FloatFilter<"PaiementMission"> | number
    restePayer?: FloatFilter<"PaiementMission"> | number
    membre?: XOR<MembreRelationFilter, MembreWhereInput>
    mission?: XOR<MissionRelationFilter, MissionWhereInput>
  }

  export type PaiementMissionOrderByWithRelationInput = {
    id?: SortOrder
    datePaiement?: SortOrder
    membreId?: SortOrder
    missionId?: SortOrder
    montant?: SortOrder
    restePayer?: SortOrder
    membre?: MembreOrderByWithRelationInput
    mission?: MissionOrderByWithRelationInput
  }

  export type PaiementMissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaiementMissionWhereInput | PaiementMissionWhereInput[]
    OR?: PaiementMissionWhereInput[]
    NOT?: PaiementMissionWhereInput | PaiementMissionWhereInput[]
    datePaiement?: DateTimeFilter<"PaiementMission"> | Date | string
    membreId?: IntFilter<"PaiementMission"> | number
    missionId?: IntFilter<"PaiementMission"> | number
    montant?: FloatFilter<"PaiementMission"> | number
    restePayer?: FloatFilter<"PaiementMission"> | number
    membre?: XOR<MembreRelationFilter, MembreWhereInput>
    mission?: XOR<MissionRelationFilter, MissionWhereInput>
  }, "id">

  export type PaiementMissionOrderByWithAggregationInput = {
    id?: SortOrder
    datePaiement?: SortOrder
    membreId?: SortOrder
    missionId?: SortOrder
    montant?: SortOrder
    restePayer?: SortOrder
    _count?: PaiementMissionCountOrderByAggregateInput
    _avg?: PaiementMissionAvgOrderByAggregateInput
    _max?: PaiementMissionMaxOrderByAggregateInput
    _min?: PaiementMissionMinOrderByAggregateInput
    _sum?: PaiementMissionSumOrderByAggregateInput
  }

  export type PaiementMissionScalarWhereWithAggregatesInput = {
    AND?: PaiementMissionScalarWhereWithAggregatesInput | PaiementMissionScalarWhereWithAggregatesInput[]
    OR?: PaiementMissionScalarWhereWithAggregatesInput[]
    NOT?: PaiementMissionScalarWhereWithAggregatesInput | PaiementMissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PaiementMission"> | number
    datePaiement?: DateTimeWithAggregatesFilter<"PaiementMission"> | Date | string
    membreId?: IntWithAggregatesFilter<"PaiementMission"> | number
    missionId?: IntWithAggregatesFilter<"PaiementMission"> | number
    montant?: FloatWithAggregatesFilter<"PaiementMission"> | number
    restePayer?: FloatWithAggregatesFilter<"PaiementMission"> | number
  }

  export type CotisationWhereInput = {
    AND?: CotisationWhereInput | CotisationWhereInput[]
    OR?: CotisationWhereInput[]
    NOT?: CotisationWhereInput | CotisationWhereInput[]
    id?: IntFilter<"Cotisation"> | number
    membreId?: IntFilter<"Cotisation"> | number
    datePaiement?: DateTimeFilter<"Cotisation"> | Date | string
    montant?: FloatFilter<"Cotisation"> | number
    mois?: StringFilter<"Cotisation"> | string
    status?: StringFilter<"Cotisation"> | string
    membre?: XOR<MembreRelationFilter, MembreWhereInput>
  }

  export type CotisationOrderByWithRelationInput = {
    id?: SortOrder
    membreId?: SortOrder
    datePaiement?: SortOrder
    montant?: SortOrder
    mois?: SortOrder
    status?: SortOrder
    membre?: MembreOrderByWithRelationInput
  }

  export type CotisationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CotisationWhereInput | CotisationWhereInput[]
    OR?: CotisationWhereInput[]
    NOT?: CotisationWhereInput | CotisationWhereInput[]
    membreId?: IntFilter<"Cotisation"> | number
    datePaiement?: DateTimeFilter<"Cotisation"> | Date | string
    montant?: FloatFilter<"Cotisation"> | number
    mois?: StringFilter<"Cotisation"> | string
    status?: StringFilter<"Cotisation"> | string
    membre?: XOR<MembreRelationFilter, MembreWhereInput>
  }, "id">

  export type CotisationOrderByWithAggregationInput = {
    id?: SortOrder
    membreId?: SortOrder
    datePaiement?: SortOrder
    montant?: SortOrder
    mois?: SortOrder
    status?: SortOrder
    _count?: CotisationCountOrderByAggregateInput
    _avg?: CotisationAvgOrderByAggregateInput
    _max?: CotisationMaxOrderByAggregateInput
    _min?: CotisationMinOrderByAggregateInput
    _sum?: CotisationSumOrderByAggregateInput
  }

  export type CotisationScalarWhereWithAggregatesInput = {
    AND?: CotisationScalarWhereWithAggregatesInput | CotisationScalarWhereWithAggregatesInput[]
    OR?: CotisationScalarWhereWithAggregatesInput[]
    NOT?: CotisationScalarWhereWithAggregatesInput | CotisationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cotisation"> | number
    membreId?: IntWithAggregatesFilter<"Cotisation"> | number
    datePaiement?: DateTimeWithAggregatesFilter<"Cotisation"> | Date | string
    montant?: FloatWithAggregatesFilter<"Cotisation"> | number
    mois?: StringWithAggregatesFilter<"Cotisation"> | string
    status?: StringWithAggregatesFilter<"Cotisation"> | string
  }

  export type CaisseSocialeWhereInput = {
    AND?: CaisseSocialeWhereInput | CaisseSocialeWhereInput[]
    OR?: CaisseSocialeWhereInput[]
    NOT?: CaisseSocialeWhereInput | CaisseSocialeWhereInput[]
    id?: IntFilter<"CaisseSociale"> | number
    soldeActuel?: FloatFilter<"CaisseSociale"> | number
    entrees?: SoldeEntreeListRelationFilter
    sorties?: SoldeSortieListRelationFilter
  }

  export type CaisseSocialeOrderByWithRelationInput = {
    id?: SortOrder
    soldeActuel?: SortOrder
    entrees?: SoldeEntreeOrderByRelationAggregateInput
    sorties?: SoldeSortieOrderByRelationAggregateInput
  }

  export type CaisseSocialeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CaisseSocialeWhereInput | CaisseSocialeWhereInput[]
    OR?: CaisseSocialeWhereInput[]
    NOT?: CaisseSocialeWhereInput | CaisseSocialeWhereInput[]
    soldeActuel?: FloatFilter<"CaisseSociale"> | number
    entrees?: SoldeEntreeListRelationFilter
    sorties?: SoldeSortieListRelationFilter
  }, "id">

  export type CaisseSocialeOrderByWithAggregationInput = {
    id?: SortOrder
    soldeActuel?: SortOrder
    _count?: CaisseSocialeCountOrderByAggregateInput
    _avg?: CaisseSocialeAvgOrderByAggregateInput
    _max?: CaisseSocialeMaxOrderByAggregateInput
    _min?: CaisseSocialeMinOrderByAggregateInput
    _sum?: CaisseSocialeSumOrderByAggregateInput
  }

  export type CaisseSocialeScalarWhereWithAggregatesInput = {
    AND?: CaisseSocialeScalarWhereWithAggregatesInput | CaisseSocialeScalarWhereWithAggregatesInput[]
    OR?: CaisseSocialeScalarWhereWithAggregatesInput[]
    NOT?: CaisseSocialeScalarWhereWithAggregatesInput | CaisseSocialeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CaisseSociale"> | number
    soldeActuel?: FloatWithAggregatesFilter<"CaisseSociale"> | number
  }

  export type SoldeEntreeWhereInput = {
    AND?: SoldeEntreeWhereInput | SoldeEntreeWhereInput[]
    OR?: SoldeEntreeWhereInput[]
    NOT?: SoldeEntreeWhereInput | SoldeEntreeWhereInput[]
    id?: IntFilter<"SoldeEntree"> | number
    date?: DateTimeFilter<"SoldeEntree"> | Date | string
    montant?: FloatFilter<"SoldeEntree"> | number
    motif?: StringFilter<"SoldeEntree"> | string
    caisseId?: IntFilter<"SoldeEntree"> | number
    caisse?: XOR<CaisseSocialeRelationFilter, CaisseSocialeWhereInput>
  }

  export type SoldeEntreeOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    montant?: SortOrder
    motif?: SortOrder
    caisseId?: SortOrder
    caisse?: CaisseSocialeOrderByWithRelationInput
  }

  export type SoldeEntreeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SoldeEntreeWhereInput | SoldeEntreeWhereInput[]
    OR?: SoldeEntreeWhereInput[]
    NOT?: SoldeEntreeWhereInput | SoldeEntreeWhereInput[]
    date?: DateTimeFilter<"SoldeEntree"> | Date | string
    montant?: FloatFilter<"SoldeEntree"> | number
    motif?: StringFilter<"SoldeEntree"> | string
    caisseId?: IntFilter<"SoldeEntree"> | number
    caisse?: XOR<CaisseSocialeRelationFilter, CaisseSocialeWhereInput>
  }, "id">

  export type SoldeEntreeOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    montant?: SortOrder
    motif?: SortOrder
    caisseId?: SortOrder
    _count?: SoldeEntreeCountOrderByAggregateInput
    _avg?: SoldeEntreeAvgOrderByAggregateInput
    _max?: SoldeEntreeMaxOrderByAggregateInput
    _min?: SoldeEntreeMinOrderByAggregateInput
    _sum?: SoldeEntreeSumOrderByAggregateInput
  }

  export type SoldeEntreeScalarWhereWithAggregatesInput = {
    AND?: SoldeEntreeScalarWhereWithAggregatesInput | SoldeEntreeScalarWhereWithAggregatesInput[]
    OR?: SoldeEntreeScalarWhereWithAggregatesInput[]
    NOT?: SoldeEntreeScalarWhereWithAggregatesInput | SoldeEntreeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SoldeEntree"> | number
    date?: DateTimeWithAggregatesFilter<"SoldeEntree"> | Date | string
    montant?: FloatWithAggregatesFilter<"SoldeEntree"> | number
    motif?: StringWithAggregatesFilter<"SoldeEntree"> | string
    caisseId?: IntWithAggregatesFilter<"SoldeEntree"> | number
  }

  export type SoldeSortieWhereInput = {
    AND?: SoldeSortieWhereInput | SoldeSortieWhereInput[]
    OR?: SoldeSortieWhereInput[]
    NOT?: SoldeSortieWhereInput | SoldeSortieWhereInput[]
    id?: IntFilter<"SoldeSortie"> | number
    date?: DateTimeFilter<"SoldeSortie"> | Date | string
    montant?: FloatFilter<"SoldeSortie"> | number
    motif?: StringFilter<"SoldeSortie"> | string
    caisseId?: IntFilter<"SoldeSortie"> | number
    caisse?: XOR<CaisseSocialeRelationFilter, CaisseSocialeWhereInput>
  }

  export type SoldeSortieOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    montant?: SortOrder
    motif?: SortOrder
    caisseId?: SortOrder
    caisse?: CaisseSocialeOrderByWithRelationInput
  }

  export type SoldeSortieWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SoldeSortieWhereInput | SoldeSortieWhereInput[]
    OR?: SoldeSortieWhereInput[]
    NOT?: SoldeSortieWhereInput | SoldeSortieWhereInput[]
    date?: DateTimeFilter<"SoldeSortie"> | Date | string
    montant?: FloatFilter<"SoldeSortie"> | number
    motif?: StringFilter<"SoldeSortie"> | string
    caisseId?: IntFilter<"SoldeSortie"> | number
    caisse?: XOR<CaisseSocialeRelationFilter, CaisseSocialeWhereInput>
  }, "id">

  export type SoldeSortieOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    montant?: SortOrder
    motif?: SortOrder
    caisseId?: SortOrder
    _count?: SoldeSortieCountOrderByAggregateInput
    _avg?: SoldeSortieAvgOrderByAggregateInput
    _max?: SoldeSortieMaxOrderByAggregateInput
    _min?: SoldeSortieMinOrderByAggregateInput
    _sum?: SoldeSortieSumOrderByAggregateInput
  }

  export type SoldeSortieScalarWhereWithAggregatesInput = {
    AND?: SoldeSortieScalarWhereWithAggregatesInput | SoldeSortieScalarWhereWithAggregatesInput[]
    OR?: SoldeSortieScalarWhereWithAggregatesInput[]
    NOT?: SoldeSortieScalarWhereWithAggregatesInput | SoldeSortieScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SoldeSortie"> | number
    date?: DateTimeWithAggregatesFilter<"SoldeSortie"> | Date | string
    montant?: FloatWithAggregatesFilter<"SoldeSortie"> | number
    motif?: StringWithAggregatesFilter<"SoldeSortie"> | string
    caisseId?: IntWithAggregatesFilter<"SoldeSortie"> | number
  }

  export type UserCreateInput = {
    username: string
    email: string
    password: string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    password: string
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    email: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type MembreCreateInput = {
    nom: string
    poste: string
    email: string
    cotisations?: CotisationCreateNestedManyWithoutMembreInput
    missions?: MissionCreateNestedManyWithoutMembreInput
    paiementsMission?: PaiementMissionCreateNestedManyWithoutMembreInput
  }

  export type MembreUncheckedCreateInput = {
    id?: number
    nom: string
    poste: string
    email: string
    cotisations?: CotisationUncheckedCreateNestedManyWithoutMembreInput
    missions?: MissionUncheckedCreateNestedManyWithoutMembreInput
    paiementsMission?: PaiementMissionUncheckedCreateNestedManyWithoutMembreInput
  }

  export type MembreUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cotisations?: CotisationUpdateManyWithoutMembreNestedInput
    missions?: MissionUpdateManyWithoutMembreNestedInput
    paiementsMission?: PaiementMissionUpdateManyWithoutMembreNestedInput
  }

  export type MembreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cotisations?: CotisationUncheckedUpdateManyWithoutMembreNestedInput
    missions?: MissionUncheckedUpdateManyWithoutMembreNestedInput
    paiementsMission?: PaiementMissionUncheckedUpdateManyWithoutMembreNestedInput
  }

  export type MembreCreateManyInput = {
    id?: number
    nom: string
    poste: string
    email: string
  }

  export type MembreUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type MembreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type MissionCreateInput = {
    montant: number
    mois: Date | string
    membre: MembreCreateNestedOneWithoutMissionsInput
    paiements?: PaiementMissionCreateNestedManyWithoutMissionInput
  }

  export type MissionUncheckedCreateInput = {
    id?: number
    membreId: number
    montant: number
    mois: Date | string
    paiements?: PaiementMissionUncheckedCreateNestedManyWithoutMissionInput
  }

  export type MissionUpdateInput = {
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
    membre?: MembreUpdateOneRequiredWithoutMissionsNestedInput
    paiements?: PaiementMissionUpdateManyWithoutMissionNestedInput
  }

  export type MissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    membreId?: IntFieldUpdateOperationsInput | number
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
    paiements?: PaiementMissionUncheckedUpdateManyWithoutMissionNestedInput
  }

  export type MissionCreateManyInput = {
    id?: number
    membreId: number
    montant: number
    mois: Date | string
  }

  export type MissionUpdateManyMutationInput = {
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    membreId?: IntFieldUpdateOperationsInput | number
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaiementMissionCreateInput = {
    datePaiement: Date | string
    montant: number
    restePayer: number
    membre: MembreCreateNestedOneWithoutPaiementsMissionInput
    mission: MissionCreateNestedOneWithoutPaiementsInput
  }

  export type PaiementMissionUncheckedCreateInput = {
    id?: number
    datePaiement: Date | string
    membreId: number
    missionId: number
    montant: number
    restePayer: number
  }

  export type PaiementMissionUpdateInput = {
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    restePayer?: FloatFieldUpdateOperationsInput | number
    membre?: MembreUpdateOneRequiredWithoutPaiementsMissionNestedInput
    mission?: MissionUpdateOneRequiredWithoutPaiementsNestedInput
  }

  export type PaiementMissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    membreId?: IntFieldUpdateOperationsInput | number
    missionId?: IntFieldUpdateOperationsInput | number
    montant?: FloatFieldUpdateOperationsInput | number
    restePayer?: FloatFieldUpdateOperationsInput | number
  }

  export type PaiementMissionCreateManyInput = {
    id?: number
    datePaiement: Date | string
    membreId: number
    missionId: number
    montant: number
    restePayer: number
  }

  export type PaiementMissionUpdateManyMutationInput = {
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    restePayer?: FloatFieldUpdateOperationsInput | number
  }

  export type PaiementMissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    membreId?: IntFieldUpdateOperationsInput | number
    missionId?: IntFieldUpdateOperationsInput | number
    montant?: FloatFieldUpdateOperationsInput | number
    restePayer?: FloatFieldUpdateOperationsInput | number
  }

  export type CotisationCreateInput = {
    datePaiement: Date | string
    montant: number
    mois: string
    status: string
    membre: MembreCreateNestedOneWithoutCotisationsInput
  }

  export type CotisationUncheckedCreateInput = {
    id?: number
    membreId: number
    datePaiement: Date | string
    montant: number
    mois: string
    status: string
  }

  export type CotisationUpdateInput = {
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    membre?: MembreUpdateOneRequiredWithoutCotisationsNestedInput
  }

  export type CotisationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    membreId?: IntFieldUpdateOperationsInput | number
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CotisationCreateManyInput = {
    id?: number
    membreId: number
    datePaiement: Date | string
    montant: number
    mois: string
    status: string
  }

  export type CotisationUpdateManyMutationInput = {
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CotisationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    membreId?: IntFieldUpdateOperationsInput | number
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CaisseSocialeCreateInput = {
    soldeActuel: number
    entrees?: SoldeEntreeCreateNestedManyWithoutCaisseInput
    sorties?: SoldeSortieCreateNestedManyWithoutCaisseInput
  }

  export type CaisseSocialeUncheckedCreateInput = {
    id?: number
    soldeActuel: number
    entrees?: SoldeEntreeUncheckedCreateNestedManyWithoutCaisseInput
    sorties?: SoldeSortieUncheckedCreateNestedManyWithoutCaisseInput
  }

  export type CaisseSocialeUpdateInput = {
    soldeActuel?: FloatFieldUpdateOperationsInput | number
    entrees?: SoldeEntreeUpdateManyWithoutCaisseNestedInput
    sorties?: SoldeSortieUpdateManyWithoutCaisseNestedInput
  }

  export type CaisseSocialeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    soldeActuel?: FloatFieldUpdateOperationsInput | number
    entrees?: SoldeEntreeUncheckedUpdateManyWithoutCaisseNestedInput
    sorties?: SoldeSortieUncheckedUpdateManyWithoutCaisseNestedInput
  }

  export type CaisseSocialeCreateManyInput = {
    id?: number
    soldeActuel: number
  }

  export type CaisseSocialeUpdateManyMutationInput = {
    soldeActuel?: FloatFieldUpdateOperationsInput | number
  }

  export type CaisseSocialeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    soldeActuel?: FloatFieldUpdateOperationsInput | number
  }

  export type SoldeEntreeCreateInput = {
    date: Date | string
    montant: number
    motif: string
    caisse: CaisseSocialeCreateNestedOneWithoutEntreesInput
  }

  export type SoldeEntreeUncheckedCreateInput = {
    id?: number
    date: Date | string
    montant: number
    motif: string
    caisseId: number
  }

  export type SoldeEntreeUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
    caisse?: CaisseSocialeUpdateOneRequiredWithoutEntreesNestedInput
  }

  export type SoldeEntreeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
    caisseId?: IntFieldUpdateOperationsInput | number
  }

  export type SoldeEntreeCreateManyInput = {
    id?: number
    date: Date | string
    montant: number
    motif: string
    caisseId: number
  }

  export type SoldeEntreeUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
  }

  export type SoldeEntreeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
    caisseId?: IntFieldUpdateOperationsInput | number
  }

  export type SoldeSortieCreateInput = {
    date: Date | string
    montant: number
    motif: string
    caisse: CaisseSocialeCreateNestedOneWithoutSortiesInput
  }

  export type SoldeSortieUncheckedCreateInput = {
    id?: number
    date: Date | string
    montant: number
    motif: string
    caisseId: number
  }

  export type SoldeSortieUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
    caisse?: CaisseSocialeUpdateOneRequiredWithoutSortiesNestedInput
  }

  export type SoldeSortieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
    caisseId?: IntFieldUpdateOperationsInput | number
  }

  export type SoldeSortieCreateManyInput = {
    id?: number
    date: Date | string
    montant: number
    motif: string
    caisseId: number
  }

  export type SoldeSortieUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
  }

  export type SoldeSortieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
    caisseId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type CotisationListRelationFilter = {
    every?: CotisationWhereInput
    some?: CotisationWhereInput
    none?: CotisationWhereInput
  }

  export type MissionListRelationFilter = {
    every?: MissionWhereInput
    some?: MissionWhereInput
    none?: MissionWhereInput
  }

  export type PaiementMissionListRelationFilter = {
    every?: PaiementMissionWhereInput
    some?: PaiementMissionWhereInput
    none?: PaiementMissionWhereInput
  }

  export type CotisationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaiementMissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MembreCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    poste?: SortOrder
    email?: SortOrder
  }

  export type MembreAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MembreMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    poste?: SortOrder
    email?: SortOrder
  }

  export type MembreMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    poste?: SortOrder
    email?: SortOrder
  }

  export type MembreSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MembreRelationFilter = {
    is?: MembreWhereInput
    isNot?: MembreWhereInput
  }

  export type MissionCountOrderByAggregateInput = {
    id?: SortOrder
    membreId?: SortOrder
    montant?: SortOrder
    mois?: SortOrder
  }

  export type MissionAvgOrderByAggregateInput = {
    id?: SortOrder
    membreId?: SortOrder
    montant?: SortOrder
  }

  export type MissionMaxOrderByAggregateInput = {
    id?: SortOrder
    membreId?: SortOrder
    montant?: SortOrder
    mois?: SortOrder
  }

  export type MissionMinOrderByAggregateInput = {
    id?: SortOrder
    membreId?: SortOrder
    montant?: SortOrder
    mois?: SortOrder
  }

  export type MissionSumOrderByAggregateInput = {
    id?: SortOrder
    membreId?: SortOrder
    montant?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type MissionRelationFilter = {
    is?: MissionWhereInput
    isNot?: MissionWhereInput
  }

  export type PaiementMissionCountOrderByAggregateInput = {
    id?: SortOrder
    datePaiement?: SortOrder
    membreId?: SortOrder
    missionId?: SortOrder
    montant?: SortOrder
    restePayer?: SortOrder
  }

  export type PaiementMissionAvgOrderByAggregateInput = {
    id?: SortOrder
    membreId?: SortOrder
    missionId?: SortOrder
    montant?: SortOrder
    restePayer?: SortOrder
  }

  export type PaiementMissionMaxOrderByAggregateInput = {
    id?: SortOrder
    datePaiement?: SortOrder
    membreId?: SortOrder
    missionId?: SortOrder
    montant?: SortOrder
    restePayer?: SortOrder
  }

  export type PaiementMissionMinOrderByAggregateInput = {
    id?: SortOrder
    datePaiement?: SortOrder
    membreId?: SortOrder
    missionId?: SortOrder
    montant?: SortOrder
    restePayer?: SortOrder
  }

  export type PaiementMissionSumOrderByAggregateInput = {
    id?: SortOrder
    membreId?: SortOrder
    missionId?: SortOrder
    montant?: SortOrder
    restePayer?: SortOrder
  }

  export type CotisationCountOrderByAggregateInput = {
    id?: SortOrder
    membreId?: SortOrder
    datePaiement?: SortOrder
    montant?: SortOrder
    mois?: SortOrder
    status?: SortOrder
  }

  export type CotisationAvgOrderByAggregateInput = {
    id?: SortOrder
    membreId?: SortOrder
    montant?: SortOrder
  }

  export type CotisationMaxOrderByAggregateInput = {
    id?: SortOrder
    membreId?: SortOrder
    datePaiement?: SortOrder
    montant?: SortOrder
    mois?: SortOrder
    status?: SortOrder
  }

  export type CotisationMinOrderByAggregateInput = {
    id?: SortOrder
    membreId?: SortOrder
    datePaiement?: SortOrder
    montant?: SortOrder
    mois?: SortOrder
    status?: SortOrder
  }

  export type CotisationSumOrderByAggregateInput = {
    id?: SortOrder
    membreId?: SortOrder
    montant?: SortOrder
  }

  export type SoldeEntreeListRelationFilter = {
    every?: SoldeEntreeWhereInput
    some?: SoldeEntreeWhereInput
    none?: SoldeEntreeWhereInput
  }

  export type SoldeSortieListRelationFilter = {
    every?: SoldeSortieWhereInput
    some?: SoldeSortieWhereInput
    none?: SoldeSortieWhereInput
  }

  export type SoldeEntreeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SoldeSortieOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaisseSocialeCountOrderByAggregateInput = {
    id?: SortOrder
    soldeActuel?: SortOrder
  }

  export type CaisseSocialeAvgOrderByAggregateInput = {
    id?: SortOrder
    soldeActuel?: SortOrder
  }

  export type CaisseSocialeMaxOrderByAggregateInput = {
    id?: SortOrder
    soldeActuel?: SortOrder
  }

  export type CaisseSocialeMinOrderByAggregateInput = {
    id?: SortOrder
    soldeActuel?: SortOrder
  }

  export type CaisseSocialeSumOrderByAggregateInput = {
    id?: SortOrder
    soldeActuel?: SortOrder
  }

  export type CaisseSocialeRelationFilter = {
    is?: CaisseSocialeWhereInput
    isNot?: CaisseSocialeWhereInput
  }

  export type SoldeEntreeCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    montant?: SortOrder
    motif?: SortOrder
    caisseId?: SortOrder
  }

  export type SoldeEntreeAvgOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    caisseId?: SortOrder
  }

  export type SoldeEntreeMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    montant?: SortOrder
    motif?: SortOrder
    caisseId?: SortOrder
  }

  export type SoldeEntreeMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    montant?: SortOrder
    motif?: SortOrder
    caisseId?: SortOrder
  }

  export type SoldeEntreeSumOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    caisseId?: SortOrder
  }

  export type SoldeSortieCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    montant?: SortOrder
    motif?: SortOrder
    caisseId?: SortOrder
  }

  export type SoldeSortieAvgOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    caisseId?: SortOrder
  }

  export type SoldeSortieMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    montant?: SortOrder
    motif?: SortOrder
    caisseId?: SortOrder
  }

  export type SoldeSortieMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    montant?: SortOrder
    motif?: SortOrder
    caisseId?: SortOrder
  }

  export type SoldeSortieSumOrderByAggregateInput = {
    id?: SortOrder
    montant?: SortOrder
    caisseId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CotisationCreateNestedManyWithoutMembreInput = {
    create?: XOR<CotisationCreateWithoutMembreInput, CotisationUncheckedCreateWithoutMembreInput> | CotisationCreateWithoutMembreInput[] | CotisationUncheckedCreateWithoutMembreInput[]
    connectOrCreate?: CotisationCreateOrConnectWithoutMembreInput | CotisationCreateOrConnectWithoutMembreInput[]
    createMany?: CotisationCreateManyMembreInputEnvelope
    connect?: CotisationWhereUniqueInput | CotisationWhereUniqueInput[]
  }

  export type MissionCreateNestedManyWithoutMembreInput = {
    create?: XOR<MissionCreateWithoutMembreInput, MissionUncheckedCreateWithoutMembreInput> | MissionCreateWithoutMembreInput[] | MissionUncheckedCreateWithoutMembreInput[]
    connectOrCreate?: MissionCreateOrConnectWithoutMembreInput | MissionCreateOrConnectWithoutMembreInput[]
    createMany?: MissionCreateManyMembreInputEnvelope
    connect?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
  }

  export type PaiementMissionCreateNestedManyWithoutMembreInput = {
    create?: XOR<PaiementMissionCreateWithoutMembreInput, PaiementMissionUncheckedCreateWithoutMembreInput> | PaiementMissionCreateWithoutMembreInput[] | PaiementMissionUncheckedCreateWithoutMembreInput[]
    connectOrCreate?: PaiementMissionCreateOrConnectWithoutMembreInput | PaiementMissionCreateOrConnectWithoutMembreInput[]
    createMany?: PaiementMissionCreateManyMembreInputEnvelope
    connect?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
  }

  export type CotisationUncheckedCreateNestedManyWithoutMembreInput = {
    create?: XOR<CotisationCreateWithoutMembreInput, CotisationUncheckedCreateWithoutMembreInput> | CotisationCreateWithoutMembreInput[] | CotisationUncheckedCreateWithoutMembreInput[]
    connectOrCreate?: CotisationCreateOrConnectWithoutMembreInput | CotisationCreateOrConnectWithoutMembreInput[]
    createMany?: CotisationCreateManyMembreInputEnvelope
    connect?: CotisationWhereUniqueInput | CotisationWhereUniqueInput[]
  }

  export type MissionUncheckedCreateNestedManyWithoutMembreInput = {
    create?: XOR<MissionCreateWithoutMembreInput, MissionUncheckedCreateWithoutMembreInput> | MissionCreateWithoutMembreInput[] | MissionUncheckedCreateWithoutMembreInput[]
    connectOrCreate?: MissionCreateOrConnectWithoutMembreInput | MissionCreateOrConnectWithoutMembreInput[]
    createMany?: MissionCreateManyMembreInputEnvelope
    connect?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
  }

  export type PaiementMissionUncheckedCreateNestedManyWithoutMembreInput = {
    create?: XOR<PaiementMissionCreateWithoutMembreInput, PaiementMissionUncheckedCreateWithoutMembreInput> | PaiementMissionCreateWithoutMembreInput[] | PaiementMissionUncheckedCreateWithoutMembreInput[]
    connectOrCreate?: PaiementMissionCreateOrConnectWithoutMembreInput | PaiementMissionCreateOrConnectWithoutMembreInput[]
    createMany?: PaiementMissionCreateManyMembreInputEnvelope
    connect?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
  }

  export type CotisationUpdateManyWithoutMembreNestedInput = {
    create?: XOR<CotisationCreateWithoutMembreInput, CotisationUncheckedCreateWithoutMembreInput> | CotisationCreateWithoutMembreInput[] | CotisationUncheckedCreateWithoutMembreInput[]
    connectOrCreate?: CotisationCreateOrConnectWithoutMembreInput | CotisationCreateOrConnectWithoutMembreInput[]
    upsert?: CotisationUpsertWithWhereUniqueWithoutMembreInput | CotisationUpsertWithWhereUniqueWithoutMembreInput[]
    createMany?: CotisationCreateManyMembreInputEnvelope
    set?: CotisationWhereUniqueInput | CotisationWhereUniqueInput[]
    disconnect?: CotisationWhereUniqueInput | CotisationWhereUniqueInput[]
    delete?: CotisationWhereUniqueInput | CotisationWhereUniqueInput[]
    connect?: CotisationWhereUniqueInput | CotisationWhereUniqueInput[]
    update?: CotisationUpdateWithWhereUniqueWithoutMembreInput | CotisationUpdateWithWhereUniqueWithoutMembreInput[]
    updateMany?: CotisationUpdateManyWithWhereWithoutMembreInput | CotisationUpdateManyWithWhereWithoutMembreInput[]
    deleteMany?: CotisationScalarWhereInput | CotisationScalarWhereInput[]
  }

  export type MissionUpdateManyWithoutMembreNestedInput = {
    create?: XOR<MissionCreateWithoutMembreInput, MissionUncheckedCreateWithoutMembreInput> | MissionCreateWithoutMembreInput[] | MissionUncheckedCreateWithoutMembreInput[]
    connectOrCreate?: MissionCreateOrConnectWithoutMembreInput | MissionCreateOrConnectWithoutMembreInput[]
    upsert?: MissionUpsertWithWhereUniqueWithoutMembreInput | MissionUpsertWithWhereUniqueWithoutMembreInput[]
    createMany?: MissionCreateManyMembreInputEnvelope
    set?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    disconnect?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    delete?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    connect?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    update?: MissionUpdateWithWhereUniqueWithoutMembreInput | MissionUpdateWithWhereUniqueWithoutMembreInput[]
    updateMany?: MissionUpdateManyWithWhereWithoutMembreInput | MissionUpdateManyWithWhereWithoutMembreInput[]
    deleteMany?: MissionScalarWhereInput | MissionScalarWhereInput[]
  }

  export type PaiementMissionUpdateManyWithoutMembreNestedInput = {
    create?: XOR<PaiementMissionCreateWithoutMembreInput, PaiementMissionUncheckedCreateWithoutMembreInput> | PaiementMissionCreateWithoutMembreInput[] | PaiementMissionUncheckedCreateWithoutMembreInput[]
    connectOrCreate?: PaiementMissionCreateOrConnectWithoutMembreInput | PaiementMissionCreateOrConnectWithoutMembreInput[]
    upsert?: PaiementMissionUpsertWithWhereUniqueWithoutMembreInput | PaiementMissionUpsertWithWhereUniqueWithoutMembreInput[]
    createMany?: PaiementMissionCreateManyMembreInputEnvelope
    set?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    disconnect?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    delete?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    connect?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    update?: PaiementMissionUpdateWithWhereUniqueWithoutMembreInput | PaiementMissionUpdateWithWhereUniqueWithoutMembreInput[]
    updateMany?: PaiementMissionUpdateManyWithWhereWithoutMembreInput | PaiementMissionUpdateManyWithWhereWithoutMembreInput[]
    deleteMany?: PaiementMissionScalarWhereInput | PaiementMissionScalarWhereInput[]
  }

  export type CotisationUncheckedUpdateManyWithoutMembreNestedInput = {
    create?: XOR<CotisationCreateWithoutMembreInput, CotisationUncheckedCreateWithoutMembreInput> | CotisationCreateWithoutMembreInput[] | CotisationUncheckedCreateWithoutMembreInput[]
    connectOrCreate?: CotisationCreateOrConnectWithoutMembreInput | CotisationCreateOrConnectWithoutMembreInput[]
    upsert?: CotisationUpsertWithWhereUniqueWithoutMembreInput | CotisationUpsertWithWhereUniqueWithoutMembreInput[]
    createMany?: CotisationCreateManyMembreInputEnvelope
    set?: CotisationWhereUniqueInput | CotisationWhereUniqueInput[]
    disconnect?: CotisationWhereUniqueInput | CotisationWhereUniqueInput[]
    delete?: CotisationWhereUniqueInput | CotisationWhereUniqueInput[]
    connect?: CotisationWhereUniqueInput | CotisationWhereUniqueInput[]
    update?: CotisationUpdateWithWhereUniqueWithoutMembreInput | CotisationUpdateWithWhereUniqueWithoutMembreInput[]
    updateMany?: CotisationUpdateManyWithWhereWithoutMembreInput | CotisationUpdateManyWithWhereWithoutMembreInput[]
    deleteMany?: CotisationScalarWhereInput | CotisationScalarWhereInput[]
  }

  export type MissionUncheckedUpdateManyWithoutMembreNestedInput = {
    create?: XOR<MissionCreateWithoutMembreInput, MissionUncheckedCreateWithoutMembreInput> | MissionCreateWithoutMembreInput[] | MissionUncheckedCreateWithoutMembreInput[]
    connectOrCreate?: MissionCreateOrConnectWithoutMembreInput | MissionCreateOrConnectWithoutMembreInput[]
    upsert?: MissionUpsertWithWhereUniqueWithoutMembreInput | MissionUpsertWithWhereUniqueWithoutMembreInput[]
    createMany?: MissionCreateManyMembreInputEnvelope
    set?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    disconnect?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    delete?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    connect?: MissionWhereUniqueInput | MissionWhereUniqueInput[]
    update?: MissionUpdateWithWhereUniqueWithoutMembreInput | MissionUpdateWithWhereUniqueWithoutMembreInput[]
    updateMany?: MissionUpdateManyWithWhereWithoutMembreInput | MissionUpdateManyWithWhereWithoutMembreInput[]
    deleteMany?: MissionScalarWhereInput | MissionScalarWhereInput[]
  }

  export type PaiementMissionUncheckedUpdateManyWithoutMembreNestedInput = {
    create?: XOR<PaiementMissionCreateWithoutMembreInput, PaiementMissionUncheckedCreateWithoutMembreInput> | PaiementMissionCreateWithoutMembreInput[] | PaiementMissionUncheckedCreateWithoutMembreInput[]
    connectOrCreate?: PaiementMissionCreateOrConnectWithoutMembreInput | PaiementMissionCreateOrConnectWithoutMembreInput[]
    upsert?: PaiementMissionUpsertWithWhereUniqueWithoutMembreInput | PaiementMissionUpsertWithWhereUniqueWithoutMembreInput[]
    createMany?: PaiementMissionCreateManyMembreInputEnvelope
    set?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    disconnect?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    delete?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    connect?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    update?: PaiementMissionUpdateWithWhereUniqueWithoutMembreInput | PaiementMissionUpdateWithWhereUniqueWithoutMembreInput[]
    updateMany?: PaiementMissionUpdateManyWithWhereWithoutMembreInput | PaiementMissionUpdateManyWithWhereWithoutMembreInput[]
    deleteMany?: PaiementMissionScalarWhereInput | PaiementMissionScalarWhereInput[]
  }

  export type MembreCreateNestedOneWithoutMissionsInput = {
    create?: XOR<MembreCreateWithoutMissionsInput, MembreUncheckedCreateWithoutMissionsInput>
    connectOrCreate?: MembreCreateOrConnectWithoutMissionsInput
    connect?: MembreWhereUniqueInput
  }

  export type PaiementMissionCreateNestedManyWithoutMissionInput = {
    create?: XOR<PaiementMissionCreateWithoutMissionInput, PaiementMissionUncheckedCreateWithoutMissionInput> | PaiementMissionCreateWithoutMissionInput[] | PaiementMissionUncheckedCreateWithoutMissionInput[]
    connectOrCreate?: PaiementMissionCreateOrConnectWithoutMissionInput | PaiementMissionCreateOrConnectWithoutMissionInput[]
    createMany?: PaiementMissionCreateManyMissionInputEnvelope
    connect?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
  }

  export type PaiementMissionUncheckedCreateNestedManyWithoutMissionInput = {
    create?: XOR<PaiementMissionCreateWithoutMissionInput, PaiementMissionUncheckedCreateWithoutMissionInput> | PaiementMissionCreateWithoutMissionInput[] | PaiementMissionUncheckedCreateWithoutMissionInput[]
    connectOrCreate?: PaiementMissionCreateOrConnectWithoutMissionInput | PaiementMissionCreateOrConnectWithoutMissionInput[]
    createMany?: PaiementMissionCreateManyMissionInputEnvelope
    connect?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MembreUpdateOneRequiredWithoutMissionsNestedInput = {
    create?: XOR<MembreCreateWithoutMissionsInput, MembreUncheckedCreateWithoutMissionsInput>
    connectOrCreate?: MembreCreateOrConnectWithoutMissionsInput
    upsert?: MembreUpsertWithoutMissionsInput
    connect?: MembreWhereUniqueInput
    update?: XOR<XOR<MembreUpdateToOneWithWhereWithoutMissionsInput, MembreUpdateWithoutMissionsInput>, MembreUncheckedUpdateWithoutMissionsInput>
  }

  export type PaiementMissionUpdateManyWithoutMissionNestedInput = {
    create?: XOR<PaiementMissionCreateWithoutMissionInput, PaiementMissionUncheckedCreateWithoutMissionInput> | PaiementMissionCreateWithoutMissionInput[] | PaiementMissionUncheckedCreateWithoutMissionInput[]
    connectOrCreate?: PaiementMissionCreateOrConnectWithoutMissionInput | PaiementMissionCreateOrConnectWithoutMissionInput[]
    upsert?: PaiementMissionUpsertWithWhereUniqueWithoutMissionInput | PaiementMissionUpsertWithWhereUniqueWithoutMissionInput[]
    createMany?: PaiementMissionCreateManyMissionInputEnvelope
    set?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    disconnect?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    delete?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    connect?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    update?: PaiementMissionUpdateWithWhereUniqueWithoutMissionInput | PaiementMissionUpdateWithWhereUniqueWithoutMissionInput[]
    updateMany?: PaiementMissionUpdateManyWithWhereWithoutMissionInput | PaiementMissionUpdateManyWithWhereWithoutMissionInput[]
    deleteMany?: PaiementMissionScalarWhereInput | PaiementMissionScalarWhereInput[]
  }

  export type PaiementMissionUncheckedUpdateManyWithoutMissionNestedInput = {
    create?: XOR<PaiementMissionCreateWithoutMissionInput, PaiementMissionUncheckedCreateWithoutMissionInput> | PaiementMissionCreateWithoutMissionInput[] | PaiementMissionUncheckedCreateWithoutMissionInput[]
    connectOrCreate?: PaiementMissionCreateOrConnectWithoutMissionInput | PaiementMissionCreateOrConnectWithoutMissionInput[]
    upsert?: PaiementMissionUpsertWithWhereUniqueWithoutMissionInput | PaiementMissionUpsertWithWhereUniqueWithoutMissionInput[]
    createMany?: PaiementMissionCreateManyMissionInputEnvelope
    set?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    disconnect?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    delete?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    connect?: PaiementMissionWhereUniqueInput | PaiementMissionWhereUniqueInput[]
    update?: PaiementMissionUpdateWithWhereUniqueWithoutMissionInput | PaiementMissionUpdateWithWhereUniqueWithoutMissionInput[]
    updateMany?: PaiementMissionUpdateManyWithWhereWithoutMissionInput | PaiementMissionUpdateManyWithWhereWithoutMissionInput[]
    deleteMany?: PaiementMissionScalarWhereInput | PaiementMissionScalarWhereInput[]
  }

  export type MembreCreateNestedOneWithoutPaiementsMissionInput = {
    create?: XOR<MembreCreateWithoutPaiementsMissionInput, MembreUncheckedCreateWithoutPaiementsMissionInput>
    connectOrCreate?: MembreCreateOrConnectWithoutPaiementsMissionInput
    connect?: MembreWhereUniqueInput
  }

  export type MissionCreateNestedOneWithoutPaiementsInput = {
    create?: XOR<MissionCreateWithoutPaiementsInput, MissionUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: MissionCreateOrConnectWithoutPaiementsInput
    connect?: MissionWhereUniqueInput
  }

  export type MembreUpdateOneRequiredWithoutPaiementsMissionNestedInput = {
    create?: XOR<MembreCreateWithoutPaiementsMissionInput, MembreUncheckedCreateWithoutPaiementsMissionInput>
    connectOrCreate?: MembreCreateOrConnectWithoutPaiementsMissionInput
    upsert?: MembreUpsertWithoutPaiementsMissionInput
    connect?: MembreWhereUniqueInput
    update?: XOR<XOR<MembreUpdateToOneWithWhereWithoutPaiementsMissionInput, MembreUpdateWithoutPaiementsMissionInput>, MembreUncheckedUpdateWithoutPaiementsMissionInput>
  }

  export type MissionUpdateOneRequiredWithoutPaiementsNestedInput = {
    create?: XOR<MissionCreateWithoutPaiementsInput, MissionUncheckedCreateWithoutPaiementsInput>
    connectOrCreate?: MissionCreateOrConnectWithoutPaiementsInput
    upsert?: MissionUpsertWithoutPaiementsInput
    connect?: MissionWhereUniqueInput
    update?: XOR<XOR<MissionUpdateToOneWithWhereWithoutPaiementsInput, MissionUpdateWithoutPaiementsInput>, MissionUncheckedUpdateWithoutPaiementsInput>
  }

  export type MembreCreateNestedOneWithoutCotisationsInput = {
    create?: XOR<MembreCreateWithoutCotisationsInput, MembreUncheckedCreateWithoutCotisationsInput>
    connectOrCreate?: MembreCreateOrConnectWithoutCotisationsInput
    connect?: MembreWhereUniqueInput
  }

  export type MembreUpdateOneRequiredWithoutCotisationsNestedInput = {
    create?: XOR<MembreCreateWithoutCotisationsInput, MembreUncheckedCreateWithoutCotisationsInput>
    connectOrCreate?: MembreCreateOrConnectWithoutCotisationsInput
    upsert?: MembreUpsertWithoutCotisationsInput
    connect?: MembreWhereUniqueInput
    update?: XOR<XOR<MembreUpdateToOneWithWhereWithoutCotisationsInput, MembreUpdateWithoutCotisationsInput>, MembreUncheckedUpdateWithoutCotisationsInput>
  }

  export type SoldeEntreeCreateNestedManyWithoutCaisseInput = {
    create?: XOR<SoldeEntreeCreateWithoutCaisseInput, SoldeEntreeUncheckedCreateWithoutCaisseInput> | SoldeEntreeCreateWithoutCaisseInput[] | SoldeEntreeUncheckedCreateWithoutCaisseInput[]
    connectOrCreate?: SoldeEntreeCreateOrConnectWithoutCaisseInput | SoldeEntreeCreateOrConnectWithoutCaisseInput[]
    createMany?: SoldeEntreeCreateManyCaisseInputEnvelope
    connect?: SoldeEntreeWhereUniqueInput | SoldeEntreeWhereUniqueInput[]
  }

  export type SoldeSortieCreateNestedManyWithoutCaisseInput = {
    create?: XOR<SoldeSortieCreateWithoutCaisseInput, SoldeSortieUncheckedCreateWithoutCaisseInput> | SoldeSortieCreateWithoutCaisseInput[] | SoldeSortieUncheckedCreateWithoutCaisseInput[]
    connectOrCreate?: SoldeSortieCreateOrConnectWithoutCaisseInput | SoldeSortieCreateOrConnectWithoutCaisseInput[]
    createMany?: SoldeSortieCreateManyCaisseInputEnvelope
    connect?: SoldeSortieWhereUniqueInput | SoldeSortieWhereUniqueInput[]
  }

  export type SoldeEntreeUncheckedCreateNestedManyWithoutCaisseInput = {
    create?: XOR<SoldeEntreeCreateWithoutCaisseInput, SoldeEntreeUncheckedCreateWithoutCaisseInput> | SoldeEntreeCreateWithoutCaisseInput[] | SoldeEntreeUncheckedCreateWithoutCaisseInput[]
    connectOrCreate?: SoldeEntreeCreateOrConnectWithoutCaisseInput | SoldeEntreeCreateOrConnectWithoutCaisseInput[]
    createMany?: SoldeEntreeCreateManyCaisseInputEnvelope
    connect?: SoldeEntreeWhereUniqueInput | SoldeEntreeWhereUniqueInput[]
  }

  export type SoldeSortieUncheckedCreateNestedManyWithoutCaisseInput = {
    create?: XOR<SoldeSortieCreateWithoutCaisseInput, SoldeSortieUncheckedCreateWithoutCaisseInput> | SoldeSortieCreateWithoutCaisseInput[] | SoldeSortieUncheckedCreateWithoutCaisseInput[]
    connectOrCreate?: SoldeSortieCreateOrConnectWithoutCaisseInput | SoldeSortieCreateOrConnectWithoutCaisseInput[]
    createMany?: SoldeSortieCreateManyCaisseInputEnvelope
    connect?: SoldeSortieWhereUniqueInput | SoldeSortieWhereUniqueInput[]
  }

  export type SoldeEntreeUpdateManyWithoutCaisseNestedInput = {
    create?: XOR<SoldeEntreeCreateWithoutCaisseInput, SoldeEntreeUncheckedCreateWithoutCaisseInput> | SoldeEntreeCreateWithoutCaisseInput[] | SoldeEntreeUncheckedCreateWithoutCaisseInput[]
    connectOrCreate?: SoldeEntreeCreateOrConnectWithoutCaisseInput | SoldeEntreeCreateOrConnectWithoutCaisseInput[]
    upsert?: SoldeEntreeUpsertWithWhereUniqueWithoutCaisseInput | SoldeEntreeUpsertWithWhereUniqueWithoutCaisseInput[]
    createMany?: SoldeEntreeCreateManyCaisseInputEnvelope
    set?: SoldeEntreeWhereUniqueInput | SoldeEntreeWhereUniqueInput[]
    disconnect?: SoldeEntreeWhereUniqueInput | SoldeEntreeWhereUniqueInput[]
    delete?: SoldeEntreeWhereUniqueInput | SoldeEntreeWhereUniqueInput[]
    connect?: SoldeEntreeWhereUniqueInput | SoldeEntreeWhereUniqueInput[]
    update?: SoldeEntreeUpdateWithWhereUniqueWithoutCaisseInput | SoldeEntreeUpdateWithWhereUniqueWithoutCaisseInput[]
    updateMany?: SoldeEntreeUpdateManyWithWhereWithoutCaisseInput | SoldeEntreeUpdateManyWithWhereWithoutCaisseInput[]
    deleteMany?: SoldeEntreeScalarWhereInput | SoldeEntreeScalarWhereInput[]
  }

  export type SoldeSortieUpdateManyWithoutCaisseNestedInput = {
    create?: XOR<SoldeSortieCreateWithoutCaisseInput, SoldeSortieUncheckedCreateWithoutCaisseInput> | SoldeSortieCreateWithoutCaisseInput[] | SoldeSortieUncheckedCreateWithoutCaisseInput[]
    connectOrCreate?: SoldeSortieCreateOrConnectWithoutCaisseInput | SoldeSortieCreateOrConnectWithoutCaisseInput[]
    upsert?: SoldeSortieUpsertWithWhereUniqueWithoutCaisseInput | SoldeSortieUpsertWithWhereUniqueWithoutCaisseInput[]
    createMany?: SoldeSortieCreateManyCaisseInputEnvelope
    set?: SoldeSortieWhereUniqueInput | SoldeSortieWhereUniqueInput[]
    disconnect?: SoldeSortieWhereUniqueInput | SoldeSortieWhereUniqueInput[]
    delete?: SoldeSortieWhereUniqueInput | SoldeSortieWhereUniqueInput[]
    connect?: SoldeSortieWhereUniqueInput | SoldeSortieWhereUniqueInput[]
    update?: SoldeSortieUpdateWithWhereUniqueWithoutCaisseInput | SoldeSortieUpdateWithWhereUniqueWithoutCaisseInput[]
    updateMany?: SoldeSortieUpdateManyWithWhereWithoutCaisseInput | SoldeSortieUpdateManyWithWhereWithoutCaisseInput[]
    deleteMany?: SoldeSortieScalarWhereInput | SoldeSortieScalarWhereInput[]
  }

  export type SoldeEntreeUncheckedUpdateManyWithoutCaisseNestedInput = {
    create?: XOR<SoldeEntreeCreateWithoutCaisseInput, SoldeEntreeUncheckedCreateWithoutCaisseInput> | SoldeEntreeCreateWithoutCaisseInput[] | SoldeEntreeUncheckedCreateWithoutCaisseInput[]
    connectOrCreate?: SoldeEntreeCreateOrConnectWithoutCaisseInput | SoldeEntreeCreateOrConnectWithoutCaisseInput[]
    upsert?: SoldeEntreeUpsertWithWhereUniqueWithoutCaisseInput | SoldeEntreeUpsertWithWhereUniqueWithoutCaisseInput[]
    createMany?: SoldeEntreeCreateManyCaisseInputEnvelope
    set?: SoldeEntreeWhereUniqueInput | SoldeEntreeWhereUniqueInput[]
    disconnect?: SoldeEntreeWhereUniqueInput | SoldeEntreeWhereUniqueInput[]
    delete?: SoldeEntreeWhereUniqueInput | SoldeEntreeWhereUniqueInput[]
    connect?: SoldeEntreeWhereUniqueInput | SoldeEntreeWhereUniqueInput[]
    update?: SoldeEntreeUpdateWithWhereUniqueWithoutCaisseInput | SoldeEntreeUpdateWithWhereUniqueWithoutCaisseInput[]
    updateMany?: SoldeEntreeUpdateManyWithWhereWithoutCaisseInput | SoldeEntreeUpdateManyWithWhereWithoutCaisseInput[]
    deleteMany?: SoldeEntreeScalarWhereInput | SoldeEntreeScalarWhereInput[]
  }

  export type SoldeSortieUncheckedUpdateManyWithoutCaisseNestedInput = {
    create?: XOR<SoldeSortieCreateWithoutCaisseInput, SoldeSortieUncheckedCreateWithoutCaisseInput> | SoldeSortieCreateWithoutCaisseInput[] | SoldeSortieUncheckedCreateWithoutCaisseInput[]
    connectOrCreate?: SoldeSortieCreateOrConnectWithoutCaisseInput | SoldeSortieCreateOrConnectWithoutCaisseInput[]
    upsert?: SoldeSortieUpsertWithWhereUniqueWithoutCaisseInput | SoldeSortieUpsertWithWhereUniqueWithoutCaisseInput[]
    createMany?: SoldeSortieCreateManyCaisseInputEnvelope
    set?: SoldeSortieWhereUniqueInput | SoldeSortieWhereUniqueInput[]
    disconnect?: SoldeSortieWhereUniqueInput | SoldeSortieWhereUniqueInput[]
    delete?: SoldeSortieWhereUniqueInput | SoldeSortieWhereUniqueInput[]
    connect?: SoldeSortieWhereUniqueInput | SoldeSortieWhereUniqueInput[]
    update?: SoldeSortieUpdateWithWhereUniqueWithoutCaisseInput | SoldeSortieUpdateWithWhereUniqueWithoutCaisseInput[]
    updateMany?: SoldeSortieUpdateManyWithWhereWithoutCaisseInput | SoldeSortieUpdateManyWithWhereWithoutCaisseInput[]
    deleteMany?: SoldeSortieScalarWhereInput | SoldeSortieScalarWhereInput[]
  }

  export type CaisseSocialeCreateNestedOneWithoutEntreesInput = {
    create?: XOR<CaisseSocialeCreateWithoutEntreesInput, CaisseSocialeUncheckedCreateWithoutEntreesInput>
    connectOrCreate?: CaisseSocialeCreateOrConnectWithoutEntreesInput
    connect?: CaisseSocialeWhereUniqueInput
  }

  export type CaisseSocialeUpdateOneRequiredWithoutEntreesNestedInput = {
    create?: XOR<CaisseSocialeCreateWithoutEntreesInput, CaisseSocialeUncheckedCreateWithoutEntreesInput>
    connectOrCreate?: CaisseSocialeCreateOrConnectWithoutEntreesInput
    upsert?: CaisseSocialeUpsertWithoutEntreesInput
    connect?: CaisseSocialeWhereUniqueInput
    update?: XOR<XOR<CaisseSocialeUpdateToOneWithWhereWithoutEntreesInput, CaisseSocialeUpdateWithoutEntreesInput>, CaisseSocialeUncheckedUpdateWithoutEntreesInput>
  }

  export type CaisseSocialeCreateNestedOneWithoutSortiesInput = {
    create?: XOR<CaisseSocialeCreateWithoutSortiesInput, CaisseSocialeUncheckedCreateWithoutSortiesInput>
    connectOrCreate?: CaisseSocialeCreateOrConnectWithoutSortiesInput
    connect?: CaisseSocialeWhereUniqueInput
  }

  export type CaisseSocialeUpdateOneRequiredWithoutSortiesNestedInput = {
    create?: XOR<CaisseSocialeCreateWithoutSortiesInput, CaisseSocialeUncheckedCreateWithoutSortiesInput>
    connectOrCreate?: CaisseSocialeCreateOrConnectWithoutSortiesInput
    upsert?: CaisseSocialeUpsertWithoutSortiesInput
    connect?: CaisseSocialeWhereUniqueInput
    update?: XOR<XOR<CaisseSocialeUpdateToOneWithWhereWithoutSortiesInput, CaisseSocialeUpdateWithoutSortiesInput>, CaisseSocialeUncheckedUpdateWithoutSortiesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CotisationCreateWithoutMembreInput = {
    datePaiement: Date | string
    montant: number
    mois: string
    status: string
  }

  export type CotisationUncheckedCreateWithoutMembreInput = {
    id?: number
    datePaiement: Date | string
    montant: number
    mois: string
    status: string
  }

  export type CotisationCreateOrConnectWithoutMembreInput = {
    where: CotisationWhereUniqueInput
    create: XOR<CotisationCreateWithoutMembreInput, CotisationUncheckedCreateWithoutMembreInput>
  }

  export type CotisationCreateManyMembreInputEnvelope = {
    data: CotisationCreateManyMembreInput | CotisationCreateManyMembreInput[]
    skipDuplicates?: boolean
  }

  export type MissionCreateWithoutMembreInput = {
    montant: number
    mois: Date | string
    paiements?: PaiementMissionCreateNestedManyWithoutMissionInput
  }

  export type MissionUncheckedCreateWithoutMembreInput = {
    id?: number
    montant: number
    mois: Date | string
    paiements?: PaiementMissionUncheckedCreateNestedManyWithoutMissionInput
  }

  export type MissionCreateOrConnectWithoutMembreInput = {
    where: MissionWhereUniqueInput
    create: XOR<MissionCreateWithoutMembreInput, MissionUncheckedCreateWithoutMembreInput>
  }

  export type MissionCreateManyMembreInputEnvelope = {
    data: MissionCreateManyMembreInput | MissionCreateManyMembreInput[]
    skipDuplicates?: boolean
  }

  export type PaiementMissionCreateWithoutMembreInput = {
    datePaiement: Date | string
    montant: number
    restePayer: number
    mission: MissionCreateNestedOneWithoutPaiementsInput
  }

  export type PaiementMissionUncheckedCreateWithoutMembreInput = {
    id?: number
    datePaiement: Date | string
    missionId: number
    montant: number
    restePayer: number
  }

  export type PaiementMissionCreateOrConnectWithoutMembreInput = {
    where: PaiementMissionWhereUniqueInput
    create: XOR<PaiementMissionCreateWithoutMembreInput, PaiementMissionUncheckedCreateWithoutMembreInput>
  }

  export type PaiementMissionCreateManyMembreInputEnvelope = {
    data: PaiementMissionCreateManyMembreInput | PaiementMissionCreateManyMembreInput[]
    skipDuplicates?: boolean
  }

  export type CotisationUpsertWithWhereUniqueWithoutMembreInput = {
    where: CotisationWhereUniqueInput
    update: XOR<CotisationUpdateWithoutMembreInput, CotisationUncheckedUpdateWithoutMembreInput>
    create: XOR<CotisationCreateWithoutMembreInput, CotisationUncheckedCreateWithoutMembreInput>
  }

  export type CotisationUpdateWithWhereUniqueWithoutMembreInput = {
    where: CotisationWhereUniqueInput
    data: XOR<CotisationUpdateWithoutMembreInput, CotisationUncheckedUpdateWithoutMembreInput>
  }

  export type CotisationUpdateManyWithWhereWithoutMembreInput = {
    where: CotisationScalarWhereInput
    data: XOR<CotisationUpdateManyMutationInput, CotisationUncheckedUpdateManyWithoutMembreInput>
  }

  export type CotisationScalarWhereInput = {
    AND?: CotisationScalarWhereInput | CotisationScalarWhereInput[]
    OR?: CotisationScalarWhereInput[]
    NOT?: CotisationScalarWhereInput | CotisationScalarWhereInput[]
    id?: IntFilter<"Cotisation"> | number
    membreId?: IntFilter<"Cotisation"> | number
    datePaiement?: DateTimeFilter<"Cotisation"> | Date | string
    montant?: FloatFilter<"Cotisation"> | number
    mois?: StringFilter<"Cotisation"> | string
    status?: StringFilter<"Cotisation"> | string
  }

  export type MissionUpsertWithWhereUniqueWithoutMembreInput = {
    where: MissionWhereUniqueInput
    update: XOR<MissionUpdateWithoutMembreInput, MissionUncheckedUpdateWithoutMembreInput>
    create: XOR<MissionCreateWithoutMembreInput, MissionUncheckedCreateWithoutMembreInput>
  }

  export type MissionUpdateWithWhereUniqueWithoutMembreInput = {
    where: MissionWhereUniqueInput
    data: XOR<MissionUpdateWithoutMembreInput, MissionUncheckedUpdateWithoutMembreInput>
  }

  export type MissionUpdateManyWithWhereWithoutMembreInput = {
    where: MissionScalarWhereInput
    data: XOR<MissionUpdateManyMutationInput, MissionUncheckedUpdateManyWithoutMembreInput>
  }

  export type MissionScalarWhereInput = {
    AND?: MissionScalarWhereInput | MissionScalarWhereInput[]
    OR?: MissionScalarWhereInput[]
    NOT?: MissionScalarWhereInput | MissionScalarWhereInput[]
    id?: IntFilter<"Mission"> | number
    membreId?: IntFilter<"Mission"> | number
    montant?: FloatFilter<"Mission"> | number
    mois?: DateTimeFilter<"Mission"> | Date | string
  }

  export type PaiementMissionUpsertWithWhereUniqueWithoutMembreInput = {
    where: PaiementMissionWhereUniqueInput
    update: XOR<PaiementMissionUpdateWithoutMembreInput, PaiementMissionUncheckedUpdateWithoutMembreInput>
    create: XOR<PaiementMissionCreateWithoutMembreInput, PaiementMissionUncheckedCreateWithoutMembreInput>
  }

  export type PaiementMissionUpdateWithWhereUniqueWithoutMembreInput = {
    where: PaiementMissionWhereUniqueInput
    data: XOR<PaiementMissionUpdateWithoutMembreInput, PaiementMissionUncheckedUpdateWithoutMembreInput>
  }

  export type PaiementMissionUpdateManyWithWhereWithoutMembreInput = {
    where: PaiementMissionScalarWhereInput
    data: XOR<PaiementMissionUpdateManyMutationInput, PaiementMissionUncheckedUpdateManyWithoutMembreInput>
  }

  export type PaiementMissionScalarWhereInput = {
    AND?: PaiementMissionScalarWhereInput | PaiementMissionScalarWhereInput[]
    OR?: PaiementMissionScalarWhereInput[]
    NOT?: PaiementMissionScalarWhereInput | PaiementMissionScalarWhereInput[]
    id?: IntFilter<"PaiementMission"> | number
    datePaiement?: DateTimeFilter<"PaiementMission"> | Date | string
    membreId?: IntFilter<"PaiementMission"> | number
    missionId?: IntFilter<"PaiementMission"> | number
    montant?: FloatFilter<"PaiementMission"> | number
    restePayer?: FloatFilter<"PaiementMission"> | number
  }

  export type MembreCreateWithoutMissionsInput = {
    nom: string
    poste: string
    email: string
    cotisations?: CotisationCreateNestedManyWithoutMembreInput
    paiementsMission?: PaiementMissionCreateNestedManyWithoutMembreInput
  }

  export type MembreUncheckedCreateWithoutMissionsInput = {
    id?: number
    nom: string
    poste: string
    email: string
    cotisations?: CotisationUncheckedCreateNestedManyWithoutMembreInput
    paiementsMission?: PaiementMissionUncheckedCreateNestedManyWithoutMembreInput
  }

  export type MembreCreateOrConnectWithoutMissionsInput = {
    where: MembreWhereUniqueInput
    create: XOR<MembreCreateWithoutMissionsInput, MembreUncheckedCreateWithoutMissionsInput>
  }

  export type PaiementMissionCreateWithoutMissionInput = {
    datePaiement: Date | string
    montant: number
    restePayer: number
    membre: MembreCreateNestedOneWithoutPaiementsMissionInput
  }

  export type PaiementMissionUncheckedCreateWithoutMissionInput = {
    id?: number
    datePaiement: Date | string
    membreId: number
    montant: number
    restePayer: number
  }

  export type PaiementMissionCreateOrConnectWithoutMissionInput = {
    where: PaiementMissionWhereUniqueInput
    create: XOR<PaiementMissionCreateWithoutMissionInput, PaiementMissionUncheckedCreateWithoutMissionInput>
  }

  export type PaiementMissionCreateManyMissionInputEnvelope = {
    data: PaiementMissionCreateManyMissionInput | PaiementMissionCreateManyMissionInput[]
    skipDuplicates?: boolean
  }

  export type MembreUpsertWithoutMissionsInput = {
    update: XOR<MembreUpdateWithoutMissionsInput, MembreUncheckedUpdateWithoutMissionsInput>
    create: XOR<MembreCreateWithoutMissionsInput, MembreUncheckedCreateWithoutMissionsInput>
    where?: MembreWhereInput
  }

  export type MembreUpdateToOneWithWhereWithoutMissionsInput = {
    where?: MembreWhereInput
    data: XOR<MembreUpdateWithoutMissionsInput, MembreUncheckedUpdateWithoutMissionsInput>
  }

  export type MembreUpdateWithoutMissionsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cotisations?: CotisationUpdateManyWithoutMembreNestedInput
    paiementsMission?: PaiementMissionUpdateManyWithoutMembreNestedInput
  }

  export type MembreUncheckedUpdateWithoutMissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cotisations?: CotisationUncheckedUpdateManyWithoutMembreNestedInput
    paiementsMission?: PaiementMissionUncheckedUpdateManyWithoutMembreNestedInput
  }

  export type PaiementMissionUpsertWithWhereUniqueWithoutMissionInput = {
    where: PaiementMissionWhereUniqueInput
    update: XOR<PaiementMissionUpdateWithoutMissionInput, PaiementMissionUncheckedUpdateWithoutMissionInput>
    create: XOR<PaiementMissionCreateWithoutMissionInput, PaiementMissionUncheckedCreateWithoutMissionInput>
  }

  export type PaiementMissionUpdateWithWhereUniqueWithoutMissionInput = {
    where: PaiementMissionWhereUniqueInput
    data: XOR<PaiementMissionUpdateWithoutMissionInput, PaiementMissionUncheckedUpdateWithoutMissionInput>
  }

  export type PaiementMissionUpdateManyWithWhereWithoutMissionInput = {
    where: PaiementMissionScalarWhereInput
    data: XOR<PaiementMissionUpdateManyMutationInput, PaiementMissionUncheckedUpdateManyWithoutMissionInput>
  }

  export type MembreCreateWithoutPaiementsMissionInput = {
    nom: string
    poste: string
    email: string
    cotisations?: CotisationCreateNestedManyWithoutMembreInput
    missions?: MissionCreateNestedManyWithoutMembreInput
  }

  export type MembreUncheckedCreateWithoutPaiementsMissionInput = {
    id?: number
    nom: string
    poste: string
    email: string
    cotisations?: CotisationUncheckedCreateNestedManyWithoutMembreInput
    missions?: MissionUncheckedCreateNestedManyWithoutMembreInput
  }

  export type MembreCreateOrConnectWithoutPaiementsMissionInput = {
    where: MembreWhereUniqueInput
    create: XOR<MembreCreateWithoutPaiementsMissionInput, MembreUncheckedCreateWithoutPaiementsMissionInput>
  }

  export type MissionCreateWithoutPaiementsInput = {
    montant: number
    mois: Date | string
    membre: MembreCreateNestedOneWithoutMissionsInput
  }

  export type MissionUncheckedCreateWithoutPaiementsInput = {
    id?: number
    membreId: number
    montant: number
    mois: Date | string
  }

  export type MissionCreateOrConnectWithoutPaiementsInput = {
    where: MissionWhereUniqueInput
    create: XOR<MissionCreateWithoutPaiementsInput, MissionUncheckedCreateWithoutPaiementsInput>
  }

  export type MembreUpsertWithoutPaiementsMissionInput = {
    update: XOR<MembreUpdateWithoutPaiementsMissionInput, MembreUncheckedUpdateWithoutPaiementsMissionInput>
    create: XOR<MembreCreateWithoutPaiementsMissionInput, MembreUncheckedCreateWithoutPaiementsMissionInput>
    where?: MembreWhereInput
  }

  export type MembreUpdateToOneWithWhereWithoutPaiementsMissionInput = {
    where?: MembreWhereInput
    data: XOR<MembreUpdateWithoutPaiementsMissionInput, MembreUncheckedUpdateWithoutPaiementsMissionInput>
  }

  export type MembreUpdateWithoutPaiementsMissionInput = {
    nom?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cotisations?: CotisationUpdateManyWithoutMembreNestedInput
    missions?: MissionUpdateManyWithoutMembreNestedInput
  }

  export type MembreUncheckedUpdateWithoutPaiementsMissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    cotisations?: CotisationUncheckedUpdateManyWithoutMembreNestedInput
    missions?: MissionUncheckedUpdateManyWithoutMembreNestedInput
  }

  export type MissionUpsertWithoutPaiementsInput = {
    update: XOR<MissionUpdateWithoutPaiementsInput, MissionUncheckedUpdateWithoutPaiementsInput>
    create: XOR<MissionCreateWithoutPaiementsInput, MissionUncheckedCreateWithoutPaiementsInput>
    where?: MissionWhereInput
  }

  export type MissionUpdateToOneWithWhereWithoutPaiementsInput = {
    where?: MissionWhereInput
    data: XOR<MissionUpdateWithoutPaiementsInput, MissionUncheckedUpdateWithoutPaiementsInput>
  }

  export type MissionUpdateWithoutPaiementsInput = {
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
    membre?: MembreUpdateOneRequiredWithoutMissionsNestedInput
  }

  export type MissionUncheckedUpdateWithoutPaiementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    membreId?: IntFieldUpdateOperationsInput | number
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MembreCreateWithoutCotisationsInput = {
    nom: string
    poste: string
    email: string
    missions?: MissionCreateNestedManyWithoutMembreInput
    paiementsMission?: PaiementMissionCreateNestedManyWithoutMembreInput
  }

  export type MembreUncheckedCreateWithoutCotisationsInput = {
    id?: number
    nom: string
    poste: string
    email: string
    missions?: MissionUncheckedCreateNestedManyWithoutMembreInput
    paiementsMission?: PaiementMissionUncheckedCreateNestedManyWithoutMembreInput
  }

  export type MembreCreateOrConnectWithoutCotisationsInput = {
    where: MembreWhereUniqueInput
    create: XOR<MembreCreateWithoutCotisationsInput, MembreUncheckedCreateWithoutCotisationsInput>
  }

  export type MembreUpsertWithoutCotisationsInput = {
    update: XOR<MembreUpdateWithoutCotisationsInput, MembreUncheckedUpdateWithoutCotisationsInput>
    create: XOR<MembreCreateWithoutCotisationsInput, MembreUncheckedCreateWithoutCotisationsInput>
    where?: MembreWhereInput
  }

  export type MembreUpdateToOneWithWhereWithoutCotisationsInput = {
    where?: MembreWhereInput
    data: XOR<MembreUpdateWithoutCotisationsInput, MembreUncheckedUpdateWithoutCotisationsInput>
  }

  export type MembreUpdateWithoutCotisationsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    missions?: MissionUpdateManyWithoutMembreNestedInput
    paiementsMission?: PaiementMissionUpdateManyWithoutMembreNestedInput
  }

  export type MembreUncheckedUpdateWithoutCotisationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    poste?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    missions?: MissionUncheckedUpdateManyWithoutMembreNestedInput
    paiementsMission?: PaiementMissionUncheckedUpdateManyWithoutMembreNestedInput
  }

  export type SoldeEntreeCreateWithoutCaisseInput = {
    date: Date | string
    montant: number
    motif: string
  }

  export type SoldeEntreeUncheckedCreateWithoutCaisseInput = {
    id?: number
    date: Date | string
    montant: number
    motif: string
  }

  export type SoldeEntreeCreateOrConnectWithoutCaisseInput = {
    where: SoldeEntreeWhereUniqueInput
    create: XOR<SoldeEntreeCreateWithoutCaisseInput, SoldeEntreeUncheckedCreateWithoutCaisseInput>
  }

  export type SoldeEntreeCreateManyCaisseInputEnvelope = {
    data: SoldeEntreeCreateManyCaisseInput | SoldeEntreeCreateManyCaisseInput[]
    skipDuplicates?: boolean
  }

  export type SoldeSortieCreateWithoutCaisseInput = {
    date: Date | string
    montant: number
    motif: string
  }

  export type SoldeSortieUncheckedCreateWithoutCaisseInput = {
    id?: number
    date: Date | string
    montant: number
    motif: string
  }

  export type SoldeSortieCreateOrConnectWithoutCaisseInput = {
    where: SoldeSortieWhereUniqueInput
    create: XOR<SoldeSortieCreateWithoutCaisseInput, SoldeSortieUncheckedCreateWithoutCaisseInput>
  }

  export type SoldeSortieCreateManyCaisseInputEnvelope = {
    data: SoldeSortieCreateManyCaisseInput | SoldeSortieCreateManyCaisseInput[]
    skipDuplicates?: boolean
  }

  export type SoldeEntreeUpsertWithWhereUniqueWithoutCaisseInput = {
    where: SoldeEntreeWhereUniqueInput
    update: XOR<SoldeEntreeUpdateWithoutCaisseInput, SoldeEntreeUncheckedUpdateWithoutCaisseInput>
    create: XOR<SoldeEntreeCreateWithoutCaisseInput, SoldeEntreeUncheckedCreateWithoutCaisseInput>
  }

  export type SoldeEntreeUpdateWithWhereUniqueWithoutCaisseInput = {
    where: SoldeEntreeWhereUniqueInput
    data: XOR<SoldeEntreeUpdateWithoutCaisseInput, SoldeEntreeUncheckedUpdateWithoutCaisseInput>
  }

  export type SoldeEntreeUpdateManyWithWhereWithoutCaisseInput = {
    where: SoldeEntreeScalarWhereInput
    data: XOR<SoldeEntreeUpdateManyMutationInput, SoldeEntreeUncheckedUpdateManyWithoutCaisseInput>
  }

  export type SoldeEntreeScalarWhereInput = {
    AND?: SoldeEntreeScalarWhereInput | SoldeEntreeScalarWhereInput[]
    OR?: SoldeEntreeScalarWhereInput[]
    NOT?: SoldeEntreeScalarWhereInput | SoldeEntreeScalarWhereInput[]
    id?: IntFilter<"SoldeEntree"> | number
    date?: DateTimeFilter<"SoldeEntree"> | Date | string
    montant?: FloatFilter<"SoldeEntree"> | number
    motif?: StringFilter<"SoldeEntree"> | string
    caisseId?: IntFilter<"SoldeEntree"> | number
  }

  export type SoldeSortieUpsertWithWhereUniqueWithoutCaisseInput = {
    where: SoldeSortieWhereUniqueInput
    update: XOR<SoldeSortieUpdateWithoutCaisseInput, SoldeSortieUncheckedUpdateWithoutCaisseInput>
    create: XOR<SoldeSortieCreateWithoutCaisseInput, SoldeSortieUncheckedCreateWithoutCaisseInput>
  }

  export type SoldeSortieUpdateWithWhereUniqueWithoutCaisseInput = {
    where: SoldeSortieWhereUniqueInput
    data: XOR<SoldeSortieUpdateWithoutCaisseInput, SoldeSortieUncheckedUpdateWithoutCaisseInput>
  }

  export type SoldeSortieUpdateManyWithWhereWithoutCaisseInput = {
    where: SoldeSortieScalarWhereInput
    data: XOR<SoldeSortieUpdateManyMutationInput, SoldeSortieUncheckedUpdateManyWithoutCaisseInput>
  }

  export type SoldeSortieScalarWhereInput = {
    AND?: SoldeSortieScalarWhereInput | SoldeSortieScalarWhereInput[]
    OR?: SoldeSortieScalarWhereInput[]
    NOT?: SoldeSortieScalarWhereInput | SoldeSortieScalarWhereInput[]
    id?: IntFilter<"SoldeSortie"> | number
    date?: DateTimeFilter<"SoldeSortie"> | Date | string
    montant?: FloatFilter<"SoldeSortie"> | number
    motif?: StringFilter<"SoldeSortie"> | string
    caisseId?: IntFilter<"SoldeSortie"> | number
  }

  export type CaisseSocialeCreateWithoutEntreesInput = {
    soldeActuel: number
    sorties?: SoldeSortieCreateNestedManyWithoutCaisseInput
  }

  export type CaisseSocialeUncheckedCreateWithoutEntreesInput = {
    id?: number
    soldeActuel: number
    sorties?: SoldeSortieUncheckedCreateNestedManyWithoutCaisseInput
  }

  export type CaisseSocialeCreateOrConnectWithoutEntreesInput = {
    where: CaisseSocialeWhereUniqueInput
    create: XOR<CaisseSocialeCreateWithoutEntreesInput, CaisseSocialeUncheckedCreateWithoutEntreesInput>
  }

  export type CaisseSocialeUpsertWithoutEntreesInput = {
    update: XOR<CaisseSocialeUpdateWithoutEntreesInput, CaisseSocialeUncheckedUpdateWithoutEntreesInput>
    create: XOR<CaisseSocialeCreateWithoutEntreesInput, CaisseSocialeUncheckedCreateWithoutEntreesInput>
    where?: CaisseSocialeWhereInput
  }

  export type CaisseSocialeUpdateToOneWithWhereWithoutEntreesInput = {
    where?: CaisseSocialeWhereInput
    data: XOR<CaisseSocialeUpdateWithoutEntreesInput, CaisseSocialeUncheckedUpdateWithoutEntreesInput>
  }

  export type CaisseSocialeUpdateWithoutEntreesInput = {
    soldeActuel?: FloatFieldUpdateOperationsInput | number
    sorties?: SoldeSortieUpdateManyWithoutCaisseNestedInput
  }

  export type CaisseSocialeUncheckedUpdateWithoutEntreesInput = {
    id?: IntFieldUpdateOperationsInput | number
    soldeActuel?: FloatFieldUpdateOperationsInput | number
    sorties?: SoldeSortieUncheckedUpdateManyWithoutCaisseNestedInput
  }

  export type CaisseSocialeCreateWithoutSortiesInput = {
    soldeActuel: number
    entrees?: SoldeEntreeCreateNestedManyWithoutCaisseInput
  }

  export type CaisseSocialeUncheckedCreateWithoutSortiesInput = {
    id?: number
    soldeActuel: number
    entrees?: SoldeEntreeUncheckedCreateNestedManyWithoutCaisseInput
  }

  export type CaisseSocialeCreateOrConnectWithoutSortiesInput = {
    where: CaisseSocialeWhereUniqueInput
    create: XOR<CaisseSocialeCreateWithoutSortiesInput, CaisseSocialeUncheckedCreateWithoutSortiesInput>
  }

  export type CaisseSocialeUpsertWithoutSortiesInput = {
    update: XOR<CaisseSocialeUpdateWithoutSortiesInput, CaisseSocialeUncheckedUpdateWithoutSortiesInput>
    create: XOR<CaisseSocialeCreateWithoutSortiesInput, CaisseSocialeUncheckedCreateWithoutSortiesInput>
    where?: CaisseSocialeWhereInput
  }

  export type CaisseSocialeUpdateToOneWithWhereWithoutSortiesInput = {
    where?: CaisseSocialeWhereInput
    data: XOR<CaisseSocialeUpdateWithoutSortiesInput, CaisseSocialeUncheckedUpdateWithoutSortiesInput>
  }

  export type CaisseSocialeUpdateWithoutSortiesInput = {
    soldeActuel?: FloatFieldUpdateOperationsInput | number
    entrees?: SoldeEntreeUpdateManyWithoutCaisseNestedInput
  }

  export type CaisseSocialeUncheckedUpdateWithoutSortiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    soldeActuel?: FloatFieldUpdateOperationsInput | number
    entrees?: SoldeEntreeUncheckedUpdateManyWithoutCaisseNestedInput
  }

  export type CotisationCreateManyMembreInput = {
    id?: number
    datePaiement: Date | string
    montant: number
    mois: string
    status: string
  }

  export type MissionCreateManyMembreInput = {
    id?: number
    montant: number
    mois: Date | string
  }

  export type PaiementMissionCreateManyMembreInput = {
    id?: number
    datePaiement: Date | string
    missionId: number
    montant: number
    restePayer: number
  }

  export type CotisationUpdateWithoutMembreInput = {
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CotisationUncheckedUpdateWithoutMembreInput = {
    id?: IntFieldUpdateOperationsInput | number
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CotisationUncheckedUpdateManyWithoutMembreInput = {
    id?: IntFieldUpdateOperationsInput | number
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type MissionUpdateWithoutMembreInput = {
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
    paiements?: PaiementMissionUpdateManyWithoutMissionNestedInput
  }

  export type MissionUncheckedUpdateWithoutMembreInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
    paiements?: PaiementMissionUncheckedUpdateManyWithoutMissionNestedInput
  }

  export type MissionUncheckedUpdateManyWithoutMembreInput = {
    id?: IntFieldUpdateOperationsInput | number
    montant?: FloatFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaiementMissionUpdateWithoutMembreInput = {
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    restePayer?: FloatFieldUpdateOperationsInput | number
    mission?: MissionUpdateOneRequiredWithoutPaiementsNestedInput
  }

  export type PaiementMissionUncheckedUpdateWithoutMembreInput = {
    id?: IntFieldUpdateOperationsInput | number
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    missionId?: IntFieldUpdateOperationsInput | number
    montant?: FloatFieldUpdateOperationsInput | number
    restePayer?: FloatFieldUpdateOperationsInput | number
  }

  export type PaiementMissionUncheckedUpdateManyWithoutMembreInput = {
    id?: IntFieldUpdateOperationsInput | number
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    missionId?: IntFieldUpdateOperationsInput | number
    montant?: FloatFieldUpdateOperationsInput | number
    restePayer?: FloatFieldUpdateOperationsInput | number
  }

  export type PaiementMissionCreateManyMissionInput = {
    id?: number
    datePaiement: Date | string
    membreId: number
    montant: number
    restePayer: number
  }

  export type PaiementMissionUpdateWithoutMissionInput = {
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    restePayer?: FloatFieldUpdateOperationsInput | number
    membre?: MembreUpdateOneRequiredWithoutPaiementsMissionNestedInput
  }

  export type PaiementMissionUncheckedUpdateWithoutMissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    membreId?: IntFieldUpdateOperationsInput | number
    montant?: FloatFieldUpdateOperationsInput | number
    restePayer?: FloatFieldUpdateOperationsInput | number
  }

  export type PaiementMissionUncheckedUpdateManyWithoutMissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    datePaiement?: DateTimeFieldUpdateOperationsInput | Date | string
    membreId?: IntFieldUpdateOperationsInput | number
    montant?: FloatFieldUpdateOperationsInput | number
    restePayer?: FloatFieldUpdateOperationsInput | number
  }

  export type SoldeEntreeCreateManyCaisseInput = {
    id?: number
    date: Date | string
    montant: number
    motif: string
  }

  export type SoldeSortieCreateManyCaisseInput = {
    id?: number
    date: Date | string
    montant: number
    motif: string
  }

  export type SoldeEntreeUpdateWithoutCaisseInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
  }

  export type SoldeEntreeUncheckedUpdateWithoutCaisseInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
  }

  export type SoldeEntreeUncheckedUpdateManyWithoutCaisseInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
  }

  export type SoldeSortieUpdateWithoutCaisseInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
  }

  export type SoldeSortieUncheckedUpdateWithoutCaisseInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
  }

  export type SoldeSortieUncheckedUpdateManyWithoutCaisseInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    montant?: FloatFieldUpdateOperationsInput | number
    motif?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use MembreCountOutputTypeDefaultArgs instead
     */
    export type MembreCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MembreCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MissionCountOutputTypeDefaultArgs instead
     */
    export type MissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaisseSocialeCountOutputTypeDefaultArgs instead
     */
    export type CaisseSocialeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaisseSocialeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MembreDefaultArgs instead
     */
    export type MembreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MembreDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MissionDefaultArgs instead
     */
    export type MissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaiementMissionDefaultArgs instead
     */
    export type PaiementMissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaiementMissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CotisationDefaultArgs instead
     */
    export type CotisationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CotisationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CaisseSocialeDefaultArgs instead
     */
    export type CaisseSocialeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CaisseSocialeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SoldeEntreeDefaultArgs instead
     */
    export type SoldeEntreeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SoldeEntreeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SoldeSortieDefaultArgs instead
     */
    export type SoldeSortieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SoldeSortieDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}